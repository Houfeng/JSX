#!/usr/bin/env node

var fs = require("fs");
var child_process = require("child_process");

var Class = require("../src/Class");
eval(Class.$import("../src/compiler"));
eval(Class.$import("../src/platform"));
eval(Class.$import("../src/classdef"));
eval(Class.$import("../src/jsemitter"));
eval(Class.$import("../src/util"));

"use strict";

var NodePlatform = Platform.extend({

	getRoot: function () {
		return __dirname.replace(/\/doc\/?$/, "");
	},

	fileExists: function (path) {
		try {
			fs.statSync(path);
			return true;
		} catch (e) {
			return false;
		}
	},

	getFilesInDirectory: function (path) {
		return fs.readdirSync(path);
	},

	load: function (path) {
		return fs.readFileSync(path).toString();
	},

	save: function (outputFile, content) {
		if (outputFile == null) {
			process.stdout.write(content);
		}
		else {
			fs.writeFileSync(outputFile, content);
		}
	}

});


var JSXDoc = Class.extend({
	$hr: "==================================================",
	$h1: "==================================================\n",
	$h2: "--------------------------------------------------\n",

	$main: function(args) {
		var sourceFile = args.shift();
		var title      = args.shift();
		if(!(sourceFile && title)) {
			console.log("usage: jsxdoc file title");
			return;
		}

		var platform = new NodePlatform();
		var compiler = new Compiler(platform);
		compiler.setEmitter(new JavaScriptEmitter(platform));
		//compiler.setMode(Compiler.MODE_PARSE);

		compiler.addSourceFile(null, sourceFile);
		compiler.compile();

		console.log(".. THIS DOCUMENT IS AUTOMATICALLY GENERATED.");
		console.log("   DO NOT EDIT THIS FILE DIRECTORY.");
		console.log("   EDIT %s INSTEAD.", sourceFile);
		console.log("");

		console.log(JSXDoc.hr);
		console.log('Module "%s"', title);
		console.log(JSXDoc.hr);
		console.log("");

		compiler.forEachClassDef(function(parser, classDef) {
			var classNameToken = classDef.getToken();
			if(classNameToken !== null && classNameToken.getFilename() === sourceFile) {
				JSXDoc.processClassDef(classDef);
			}
			return true;
		});

	},

	$processClassDef: function(classDef) {
		// H1 class name
		console.log(classDef.className());
		console.log(JSXDoc.h1);
		console.log("");

		// FIXME: print class hierarchy

		var varDecl = function (member) {
			var isConst = (member.flags() & ClassDefinition.IS_CONST) !== 0;
			return isConst ? "const" : "var";
		};

		// members
		console.log("Static Member Variables");
		console.log(JSXDoc.h2);
		classDef.forEachMemberVariable(function(member) {
			if((member.flags() & ClassDefinition.IS_STATIC) === 0) {
				return true;
			}
			console.log("* static %s %s : %s",
						varDecl(member),
						member.name(),
						member.getType().toString());
			return true;
		});
		console.log("");


		console.log("Static Member Functions");
		console.log(JSXDoc.h2);
		classDef.forEachMemberFunction(function(member) {
			if((member.flags() & ClassDefinition.IS_STATIC) === 0) {
				return true;
			}
			var args = member.getArguments().map(function(arg) {
				var argName = arg.getName().getValue();
				var argType = arg.getType().toString();
				return Util.format("%1 : %2", [argName, argType]);
			});

			console.log("* static function %s(%s) : %s",
						member.name(),
						args.join(", "),
						member.getReturnType().toString());
			return true;
		});
		console.log("");

		console.log("Member Variables");
		console.log(JSXDoc.h2);
		classDef.forEachMemberVariable(function(member) {
			if((member.flags() & ClassDefinition.IS_STATIC) !== 0) {
				return true;
			}

			console.log("* %s %s : %s",
						varDecl(member),
						member.name(),
						member.getType().toString());
			return true;
		});
		console.log("");

		console.log("Member Functions");
		console.log(JSXDoc.h2);
		classDef.forEachMemberFunction(function(member) {
			if((member.flags() & ClassDefinition.IS_STATIC) !== 0) {
				return true;
			}
			var args = member.getArguments().map(function(arg) {
				var argName = arg.getName().getValue();
				var argType = arg.getType().toString();
				return Util.format("%1 : %2", [argName, argType]);
			});

			console.log("* function %s(%s) : %s",
						member.name(),
						args.join(", "),
						member.getReturnType().toString());
			return true;
		});
		console.log("");

		// inherited members
		classDef.extendClassDef() && classDef.forEachClassFromBase(function(baseClassDef) {
			if(classDef === baseClassDef) {
				return false;
			}

			console.log("Inherited Members from %s", baseClassDef.className());
			console.log(JSXDoc.h2);

			var members = [];
			baseClassDef.forEachMemberVariable(function(member) {
				if((member.flags() & ClassDefinition.IS_STATIC) === 0) {
					return true;
				}
				members.push(member.name());
				return true;
			});
			if(members.length > 0) {
				console.log("* static member variables: %s", members.join(", "));
			}

			members = [];
			baseClassDef.forEachMemberFunction(function(member) {
				if((member.flags() & ClassDefinition.IS_STATIC) !== 0) {
					return true;
				}
				members.push(member.name() + "()");
				return true;
			});
			if(members.length > 0) {
				console.log("* member functions: %s", members.join(", "));
			}

			members = [];
			baseClassDef.forEachMemberVariable(function(member) {
				if((member.flags() & ClassDefinition.IS_STATIC) !== 0) {
					return true;
				}
				members.push(member.name());
				return true;
			});
			if(members.length > 0) {
				console.log("* member variables: %s", members.join(", "));
			}

			members = [];
			baseClassDef.forEachMemberFunction(function(member) {
				if((member.flags() & ClassDefinition.IS_STATIC) === 0) {
					return true;
				}
				members.push(member.name() + "()");
				return true;
			});
			if(members.length > 0) {
				console.log("* member functions: %s", members.join(", "));
			}

			console.log("");
			return true;
		});
	}

});

JSXDoc.main(process.argv.slice(2));


// vim: set ft=javascript:
// vim: set noexpandtab:

#!/usr/bin/env node

/*
 * Copyright (c) 2012 DeNA Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

var fs = require("fs");
var path = require("path");

var Class = require("../src/Class");
eval(Class.$import("../src/compiler"));
eval(Class.$import("../src/completion"));
eval(Class.$import("../src/doc"));
eval(Class.$import("../src/platform"));
eval(Class.$import("../src/jsemitter"));
eval(Class.$import("../src/optimizer"));
eval(Class.$import("../src/util"));

"use strict";

var NodePlatform = Platform.extend({
	constructor: function(rootDir) {
		console.assert(rootDir, "rootDir");
		this._root = rootDir.replace(/\\/g, "/");
		this._virtualFile = Object.create(null);
	},

	getRoot: function () {
		return this._root;
	},

	fileExists: function (name) {
		name = path.normalize(name);
		if (name in this._virtualFile) {
			return true;
		}
		try {
			fs.statSync(name);
			return true;
		} catch (e) {
			return false;
		}
	},

	chmod: function (name, mode) {
		return fs.chmodSync(name, mode);
	},

	getFilesInDirectory: function (path) {
		return fs.readdirSync(path);
	},

	setFileContent: function (name, content) {
		this._virtualFile[name] = content;
	},

	load: function (name) {
		name = path.normalize(name);
		if (name in this._virtualFile) {
			return this._virtualFile[name];
		}
		else if (name === "-") {
			var fd = process.stdin.fd;

			var content = "";
			var BUFFER_SIZE = 4096;
			var buffer = new Buffer(BUFFER_SIZE);
			var n;

			while( (n = fs.readSync(fd, buffer, 0, BUFFER_SIZE)) > 0) {
				content += buffer.slice(0, n).toString();
			}
			return content;
		}
		else {
			return fs.readFileSync(name).toString();
		}
	},

	save: function (outputFile, content) {
		if (outputFile == null) {
			process.stdout.write(content);
		}
		else {
			fs.writeFileSync(outputFile, content);
		}
	},

	log: function (message) {
		this.save(null, message + "\n");
	},

	mkpath: function (path) {
		try {
			fs.statSync(path);
		} catch (e) {
			var dirOfPath = path.replace(/\/[^/]*$/, "");
			if (dirOfPath != path) {
				this.mkpath(dirOfPath);
			}
			fs.mkdirSync(path);
		}
	},

	// called from JavaScriptEmitter
	addLauncher: function (emitter, sourceFile, targetCode, entryPoint, executableFor) {
		if(emitter instanceof JavaScriptEmitter) {
			targetCode += this.load(this.getRoot() + "/src/js/launcher.js");

			var args = (executableFor === "node" ? "process.argv.slice(2)" : "[]");
			switch(entryPoint) {
			case "_Main":
				launcher = "runMain";
				break;
			case "_Test":
				launcher = "runTests";
				break;
			default:
				throw new Error("Unknown entry point type: " +
								entryPoint);
			}
			var callEntryPoint = Util.format("JSX.%1(%2, %3)",
					[launcher, JSON.stringify(sourceFile), args]);

			if (executableFor === "web") {
				callEntryPoint = this.wrapOnLoad(callEntryPoint);
			}

			return targetCode + callEntryPoint + "\n";
		}
		else {
			throw new Error("FIXME");
		}
	},

	wrapOnLoad: function (code) {
		var wrapper = this.load(this.getRoot() + "/src/js/web-launcher.js");
		return wrapper.replace(/\/\/--CODE--\/\//, code);
	},

	mktemp: function(template, suffix) {
		var tmpdir = process.env.TMPDIR || process.env.TMP || "/tmp";
		var tmpname = Util.format("%2.%3.%4.%5", [
			tmpdir,
			path.basename(template || "-"),
			process.pid.toString(),
			Date.now().toString(16),
			suffix
		]);
		return path.join(tmpdir, tmpname);
	},

	runJS: function (jsEngine, scriptFile, scriptSource, args) {
		var jsFile = this.mktemp(scriptFile, "js");
		fs.writeFileSync(jsFile, scriptSource);
		if (jsEngine) { // execute it in external prosess
			var jsArgs = [jsFile].concat(args);
			var child = require("child_process").spawn(jsEngine, jsArgs);
			child.on("exit", function () {
				fs.unlinkSync(jsFile);
			});
			child.stdin.end();
			child.stdout.on("data", function (data) {
				process.stdout.write(data);
			});
			child.stderr.on("data", function (data) {
				process.stderr.write(data);
			});
		}
		else { // execute it in this process
			process.argv = [process.argv[0], jsFile].concat(args);
			try {
				require(jsFile);
			}
			finally {
				fs.unlinkSync(jsFile);
			}
		}
	},
});

var CompilationPlatform = NodePlatform.extend({
	constructor: function (parentPlatform) {
		NodePlatform.prototype.constructor.call(this, parentPlatform._root);

		this._stdout     = "";
		this._stderr     = "";
		this._file       = {};
		this._statusCode = -1;
	},

	chmod: function (name, mode) {
		// noop
		return true;
	},

	save: function (outputFile, content) {
		if (outputFile == null) {
			this._stdout += content;
		}
		else {
			this._file[outputFile] = content;
		}
	},
	error: function (message) {
		this._stderr += message + "\n";
	},

	runJS: function (jsEngine, scriptFile, scriptSource, args) {
		if (jsEngine == null) {
			// always run it in an external process
			jsEngine = process.execPath;
		}
		var jsFile = this.mktemp(scriptFile, "js");
		fs.writeFileSync(jsFile, scriptSource);

		var jsArgs = [jsFile].concat(args);
		var child = require("child_process").spawn(jsEngine, jsArgs);
		// on.exit looks unstable, so we use on.close instead
		child.on("close", function () {
			fs.unlinkSync(jsFile);
			this.runningJS = false;

			this.onExit();
		}.bind(this));

		child.stdin.end();
		child.stdout.on("data", function (data) {
			this._stdout += data;
		}.bind(this));
		child.stderr.on("data", function (data) {
			this._stderr += data;
		}.bind(this));

		this.runningJS = true;
	},

	setStatusCode: function(statusCode) {
		this._statusCode = statusCode;
	},

	getOutput: function () {
		return {
			stdout     : this._stdout,
			stderr     : this._stderr,
			file       : this._file,
			statusCode : this._statusCode
		};
	}
});

var CompilationServer = Class.extend({
	$_requestSequence : 0,

	$runServer: function (platform, port) {
		var http = require("http");
		var httpd = http.createServer(function (request, response) {
			CompilationServer.handleRequest(platform, request, response);
		});
		httpd.listen(parseInt(port, 10));
		console.log("http://localhost:%d", parseInt(port, 10));
	},
	$handleRequest: function (platform, request, response) {
		var c = new CompilationPlatform(platform);

		var startTime = new Date();
		var id        = ++CompilationServer._requestSequence;

		var inputData = "";
		request.on("data", function (chunk) {
			inputData += chunk;
		});
		request.on("end", function () {
			console.info("%s#%s start  %s", startTime, id, inputData);

			try {
				var args = JSON.parse(inputData);
				c.setStatusCode(Main.run(c, args));
			}
			catch (e) {
				console.error("%s#s %s", startTime, id, e.stack);
				c.error(e.toString());
			}

			var finish = function () {
				CompilationServer.finish(response, 200, c.getOutput());

				var now     = new Date();
				var elapsed = now - startTime.getTime();
				console.info("%s#%s finish %s, elapsed %s [ms]", now, id, inputData, elapsed);
			};

			if (! c.runningJS) {
				finish();
			}
			else {
				c.onExit = finish;
			}
		});
		request.on("close", function () {
			c.error("the connecion is unexpectedly terminated.\n");
			CompilationServer.finish(response, 500, c.getOutput());
		});
	},

	$finish: function (response, statusCode, data) {
		var content = JSON.stringify(data);

		var headers = {
			"Content-Type" : "application/json",
			"Content-Length" : Buffer.byteLength(content),
			"Cache-Control" : "no-cache"
		};

		response.writeHead(statusCode, headers);
		response.end(content, "utf8");
	},
});

var Main = Class.extend({
	$_meta: null,

	$meta: function (name) {
		if (Main._meta === null) {
			var j = fs.readFileSync( __dirname + "/../package.json" );
			Main._meta = JSON.parse(j);
		}
		return Main._meta[name];
	},

	$printHelp: function (platform) {
		platform.log(
			"JSX compiler version " + Main.meta("version") + "\n" +
			"\n" +
			"Usage: jsx [options] source-files\n" +
			"\n" +
			"Options:\n" +
			"  --add-search-path path     add a path to library search paths\n" +
			"  --executable (node|web)    add launcher to call _Main.main(:string[]):void\n" +
			"  --run                      runs _Main.main(:string[]):void after compiling\n" +
			"  --test                     runs _Test#test*():void after compiling\n" +
			"  --output file              output file (default:stdout)\n" +
			"  --input-filename file      names input filename\n" +
			"  --mode (compile|parse|doc) compilation mode (default:compile)\n" +
			"  --target (javascript|c++)  target language (default:javascript)\n" +
			"  --release                  omits the debugging features from the generated code (run-time type checking, logging, assertion)\n" +
			"  --profile                  enables the profiler (experimental)\n" +
			"  --optimize cmd1,cmd2,...   list of optimize commands (no-assert, no-log, inline, return-if)\n" +
			"  --warn type1,type2,...     list types of warnings (all, deprecated, none)\n" +
			"  --enable-type-check        enables run-time type checking\n" +
			"  --enable-source-map        enables source map debugging info\n" +
			"  --version                  displays the version and exits\n" +
			"  --help                     displays this help and exits\n" +
			"");
	},

	$main: function (argv) {
		var platform = new NodePlatform(path.dirname(__dirname));
		return Main.run(platform, argv);
	},
	$run: function (platform, args) {
		args = getEnvOpts().concat(args);

		var argIndex = 0;
		var getopt = function () {
			if (args.length <= argIndex)
				return null;
			var arg = args[argIndex++];
			if (arg == "--")
				return null;
			if (arg.match(/^-/))
				return arg;
			else {
				--argIndex;
				return null;
			}
		};
		var getoptarg = function () {
			if (args.length <= argIndex) {
				platform.error("option " + args[argIndex - 1] + " requires a value");
				return null;
			}
			return args[argIndex++];
		};

		var compiler = new Compiler(platform);

		var tasks = [];

		var completionRequest = null;
		var emitter = null;
		var outputFile = null;
		var inputFilename = null;
		var executable = null;
		var run = null;
		var runImmediately = false;
		var optimizeCommands = [];
		var opt, optarg;
		while ((opt = getopt()) != null) {
		NEXTOPT:
			switch (opt) {
			case "--add-search-path":
				if((optarg= getoptarg()) == null) {
					return 1;
				}
				compiler.addSearchPath(optarg);
				break;
			case "--output":
				if((outputFile = getoptarg()) == null) {
					return 1;
				}
				break;
			case "--input-filename":
				if((inputFilename = getoptarg()) == null) {
					return 1;
				}
				break;
			case "--input-content": // dealt with as stdin
				if((getoptarg = getoptarg()) == null) {
					return 1;
				}
				platform.setFileContent("-", getoptarg);
				break;
			case "--mode":
				if ((optarg = getoptarg()) == null) {
					return 1;
				}
				switch (optarg) {
				case "compile":
					compiler.setMode(Compiler.MODE_COMPILE);
					break;
				case "parse":
					compiler.setMode(Compiler.MODE_PARSE);
					break;
				case "doc":
					compiler.setMode(Compiler.MODE_DOC);
					break;
				default:
					platform.error("unknown mode: " + optarg);
					return 1;
				}
				break;
			case "--complete":
				if ((optarg = getoptarg()) == null) {
					return 1;
				}
				completionRequest = function () {
					var a = optarg.split(/:/);
					return new CompletionRequest(a[0], a[1] - 1);
				}();
				compiler.setMode(Compiler.MODE_COMPLETE);
				break;
			case "--target":
				if ((optarg = getoptarg()) == null) {
					return 1;
				}
				switch (optarg) {
				case "javascript":
					emitter = new JavaScriptEmitter(platform);
					break;
				case "c++":
					throw new Error("FIXME");
					break;
				default:
					platform.error("unknown target: " + optarg);
					return 1;
				}
				break;
			case "--release":
				tasks.push(function () {
					emitter.setEnableRunTimeTypeCheck(false);
					optimizer.setEnableRunTimeTypeCheck(false);
				});
				optimizeCommands = [ "lto", "no-assert", "no-log", "fold-const", "return-if", "inline", "dce", "unbox", "fold-const", "lcse", "dce", "fold-const", "array-length", "unclassify" ];
				break;
			case "--optimize":
				if ((optarg = getoptarg()) == null) {
					return 1;
				}
				optimizeCommands = optarg.split(",");
				break;
			case "--warn":
				if ((optarg = getoptarg()) == null) {
					return 1;
				}
				optarg.split(",").forEach(function (type) {
					switch (type) {
					case "none":
						compiler.getWarningFilters().unshift(function (warning) {
							return false;
						});
						break;
					case "all":
						compiler.getWarningFilters().unshift(function (warning) {
							return true;
						});
						break;
					case "deprecated":
						compiler.getWarningFilters().unshift(function (warning) {
							if (warning instanceof DeprecatedWarning) {
								return true;
							}
							return null;
						});
						break;
					default:
						platform.error("unknown warning type: " + type);
						return 1;
					}
				});
				break;
			case "--executable":
				if ((optarg = getoptarg()) == null) {
					return 1;
				}
				switch (optarg) {
				case "web": // JavaScriptEmitter
					break;
				case "node": // implies JavaScriptEmitter
					tasks.push(function () {
						var shebang =  "#!" + process.execPath + "\n";
						emitter.addHeader(shebang);
					});
					break;
				default:
					platform.error("unknown executable type (node|web)");
					return 1;
				}
				executable = optarg;
				run = "_Main";
				break;
			case "--run":
				run = "_Main";
				executable = "node";
				runImmediately = true;
				break;
			case "--test":
				run = "_Test";
				executable = "node";
				runImmediately = true;
				break;
			case "--profile":
				tasks.push(function () {
					emitter.setEnableProfiler(true);
				});
				break;
			case "--compilation-server":
				if ((optarg = getoptarg()) == null) {
					return 1;
				}
				CompilationServer.runServer(platform, optarg);
				return 0;
			case "--version":
				platform.log( Main.meta("version"));
				return 0;
			case "--help":
				Main.printHelp(platform);
				return 0;
			default:
				var switchOpt = opt.match("^--(enable|disable)-(.*)$");
				if (switchOpt != null) {
					var mode = switchOpt[1] == "enable";
					switch (switchOpt[2]) {
					case "type-check":
						tasks.push(function (mode) {
							return function () {
								emitter.setEnableRunTimeTypeCheck(mode);
								optimizer.setEnableRunTimeTypeCheck(mode);
							};
						}(mode));
						break NEXTOPT;
					case "source-map":
						tasks.push(function (mode) {
							return function () {
								emitter.setEnableSourceMap(mode);
							};
						}(mode));
						break NEXTOPT;
					default:
						break;
					}
				}
				platform.error("unknown option: " + opt);
				return 1;
			}
		}

		if (argIndex == args.length) {
			platform.error("no files");
			return 1;
		}

		var sourceFile = args[argIndex++];
		if (inputFilename != null) {
			platform.setFileContent(inputFilename, platform.load(sourceFile));
			sourceFile = inputFilename;
		}
		compiler.addSourceFile(null, sourceFile, completionRequest);

		switch (compiler.getMode()) {
		case Compiler.MODE_PARSE:
			if (compiler.compile()) {
				platform.save(outputFile, compiler.getAST());
				return 0;
			} else {
				return 1;
			}
			break;
		}

		if (emitter == null)
			emitter = new JavaScriptEmitter(platform);
		compiler.setEmitter(emitter);

		switch (compiler.getMode()) {
		case Compiler.MODE_DOC:
			if (outputFile == null) {
				platform.error("--output is mandatory for --mode doc");
				return 1;
			}
			if (compiler.compile()) {
				new DocumentGenerator(compiler)
					.setOutputPath(outputFile)
					.setPathFilter(function (sourcePath) {
						return sourcePath.indexOf(platform.getRoot()) != 0;
					})
					.setTemplatePath(platform.getRoot() + "/src/doc/template.html")
					.buildDoc();
				return 0;
			} else {
				return 1;
			}
		}

		var optimizer = new Optimizer();
		var err = optimizer.setup(optimizeCommands);
		if (err != null) {
			platform.error(err);
			return 0;
		}

		tasks.forEach(function(proc) { proc(); });

		emitter.setOutputFile(outputFile);

		compiler.setOptimizer(optimizer);

		var result = compiler.compile();

		if (completionRequest != null) {
			platform.save(null, JSON.stringify(completionRequest.getCandidates()));
			return 0;
		}

		if (! result)
			return 1;

		var output = emitter.getOutput(sourceFile, run, executable);

		if (emitter instanceof JavaScriptEmitter) {
			if (! runImmediately) { // compile and save

				platform.save(outputFile, output);
				if (outputFile != null) {
					emitter.saveSourceMappingFile(platform);

					if (executable === "node") {
						platform.chmod(outputFile, "0755");
					}
				}

			}
			else {
				platform.runJS(process.env.JSX_RUNJS, sourceFile, output, args.slice(argIndex));
			}
		}
		else {
			throw new Error("FIXME: C++ emitter");
		}
		return 0;
	}
});

function getEnvOpts() {
	var opts = process.env["JSX_OPTS"];
	if (! opts)
		return [];
	return opts.split(/\s+/);
}

var exitCode = Main.main(process.argv.slice(2));

// NOTE:
// nodejs 0.8.0 on Windows doesn't flush stdout buffer before exitting.
// use "drain" event for workaround
// https://groups.google.com/forum/#!msg/nodejs/qXkr1C2c8vs/567P_mVZacsJ
(function (exitCode) {
	if (exitCode === 0) {
		return;
	}

	var stdoutIsFlushed = process.stdout.write("");
	var stderrIsFlushed = process.stderr.write("");

	var exitIfFlushed = function () {
		if (stdoutIsFlushed && stderrIsFlushed) {
			process.exit(exitCode);
		}
	};

	if (! stdoutIsFlushed) {
		process.stdout.on('drain', exitIfFlushed);
	}
	if (! stderrIsFlushed) {
		process.stderr.on('drain', exitIfFlushed);
	}

	exitIfFlushed();
}(exitCode));

// vim: set ft=javascript:
// vim: set noexpandtab:

#!/usr/bin/env node


var VERSION = "0.0.1";

var fs = require("fs");
var sourceMap = require("source-map");

var Class = require("../lib/Class");
eval(Class.$import("../lib/compiler"));
eval(Class.$import("../lib/jsemitter"));
eval(Class.$import("../lib/platform"));

"use strict";

var SourceMapGenerator = SourceMapGeneratorBase.extend({
	initialize: function (file, sourceRoot) {
		this._impl = new sourceMap.SourceMapGenerator({
			file: file,
			sourceRoot: sourceRoot // optional
		});
	},

	add: function (generatedPos, originalPos, source, name) {
		this._impl.addMapping({
			generated: generatedPos,
			original:  originalPos,
			source: source, // optional
			name: name // optional
		});
	},

	generate: function () {
		return this._impl.toString();
	},

	magicToken: function () {
		var mappingName = "FIXME";
		return "\n" + "// @sourceMappingURL=" + mappingName + "\n";
	}
});

var NodePlatform = Platform.extend({
	load: function(filename) {
		return fs.readFileSync(filename).toString();
	},

	createSourceMapGenerator: function (file, sourceRoot) {
		return new SourceMapGenerator(file, sourceRoot);
	}
});

var JSX = Class.extend({

	$printHelp: function () {
		console.log(
			"JSX compiler version " + VERSION + "\n" +
			"\n" +
			"Usage: jsx [options] source-files\n" +
			"\n" +
			"Options:\n" +
			"   -o      file\n" +
			"  --output file              output file (default:stdout)\n" +
			"  --mode (compile|parse)     compilation mode (default:compile)\n" +
			"  --target (javascript|c++)  target language (default:javascript)\n" +
			"  --version                  displays the version and exits\n" +
			"  --help                     displays this help and exits\n" +
			"");
	},

	$main: function (args) {

		var platform = new NodePlatform();

		var argIndex = 0;
		var getopt = function () {
			if (args.length <= argIndex)
				return null;
			var arg = args[argIndex++];
			if (arg.match(/^-/))
				return arg;
			else if (arg == "--")
				return null;
			else {
				--argIndex;
				return null;
			}
		};
		var getoptarg = function () {
			if (args.length <= argIndex) {
				console.error("option " + args[argIndex - 1] + " requires a value");
				return null;
			}
			return args[argIndex++];
		};

		var compiler = new Compiler(platform);

		var hasEmitter = false;
		var outputFile = null;
		var opt, optarg;
		while ((opt = getopt()) != null) {
			switch (opt) {
			case "-o":
			case "--output":
				if((outputFile = getoptarg()) == null)
					process.exit(1);
				compiler.setOutputFile(outputFile);
				break;
			case "--mode":
				if ((optarg = getoptarg()) == null)
					process.exit(1);
				switch (optarg) {
				case "compile":
					compiler.setMode(Compiler.MODE_COMPILE);
					break;
				case "parse":
					compiler.setMode(Compiler.MODE_PARSE);
					break;
				default:
					console.error("unknown mode: " + optarg);
					process.exit(1);
					break;
				}
				break;
			case "--target":
				if ((optarg = getoptarg()) == null)
					process.exit(1);
				hasEmitter = true;
				switch (optarg) {
				case "javascript":
					compiler.setEmitter(new JavaScriptEmitter(outputFile,
															  platform));
					break;
				case "c++":
					throw new Error("FIXME");
					break;
				default:
					console.log("unknown target: " + optarg);
					process.exit(1);
				}
				break;
			case "--version":
				console.log(VERSION);
				process.exit(0);
				break;
			case "--help":
				JSX.printHelp();
				process.exit(0);
				break;
			default:
				console.error("unknown option: " + opt);
				process.exit(1);
				break;
			}
		}

		if(!hasEmitter)
			compiler.setEmitter(new JavaScriptEmitter(outputFile,
													  platform));
		
		if (argIndex == args.length) {
			console.error("no files");
			process.exit(1);
		}

		for (; argIndex < args.length; ++argIndex)
			compiler.addSourceFile(args[argIndex]);

		if (! compiler.compile())
			process.exit(1);

		if(outputFile == null)
			process.stdout.write(compiler.getOutput());
		else
			fs.writeFileSync(outputFile, compiler.getOutput());
	}

});

JSX.main(process.argv.slice(2));

// vim: set ft=javascript:
// vim: set noexpandtab:

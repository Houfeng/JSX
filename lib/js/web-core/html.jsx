// THIS FILE IS AUTOMATICALLY GENERATED.
/**

A vocabulary and associated APIs for HTML and XHTML

Specification:
    http://www.w3.org/TR/html5/
*/

import "./dom.jsx";
import "./css.jsx";
import "./events.jsx";
import "./file.jsx";

/*
automatically generated from:
	http://www.w3.org/TR/html5/single-page.html
*/
native __fake__ class Window {

	function getComputedStyle(elt : Element) : CSSStyleDeclaration;
	function getComputedStyle(
		elt : Element,
		pseudoElt : string/*DOMString*/
	) : CSSStyleDeclaration;

	function matchMedia(
		media_query_list : string/*DOMString*/
	) : MediaQueryList;
	__readonly__ var screen : Screen;
	// viewport
	__readonly__ var innerWidth : int/*long*/;
	__readonly__ var innerHeight : int/*long*/;
	// viewport scrolling
	__readonly__ var scrollX : int/*long*/;
	__readonly__ var pageXOffset : int/*long*/;
	__readonly__ var scrollY : int/*long*/;
	__readonly__ var pageYOffset : int/*long*/;
	function scroll(x : int/*long*/, y : int/*long*/) : void;
	function scrollTo(x : int/*long*/, y : int/*long*/) : void;
	function scrollBy(x : int/*long*/, y : int/*long*/) : void;
	// client
	__readonly__ var screenX : int/*long*/;
	__readonly__ var screenY : int/*long*/;
	__readonly__ var outerWidth : int/*long*/;
	__readonly__ var outerHeight : int/*long*/;

	// the current browsing context
	__readonly__ var window : Window/*WindowProxy*/;
	__readonly__ var self : Window/*WindowProxy*/;
	__readonly__ var document : HTMLDocument/*Document*/;
	var name : string/*DOMString*/;
	__readonly__ var location : Location;
	__readonly__ var history : History;
	__readonly__ var locationbar : BarProp;
	__readonly__ var menubar : BarProp;
	__readonly__ var personalbar : BarProp;
	__readonly__ var scrollbars : BarProp;
	__readonly__ var statusbar : BarProp;
	__readonly__ var toolbar : BarProp;
	var status : string/*DOMString*/;
	function close() : void;
	function stop() : void;
	function focus() : void;
	function blur() : void;
	// other browsing contexts
	__readonly__ var frames : Window/*WindowProxy*/;
	__readonly__ var length : int/*unsigned long*/;
	__readonly__ var top : Window/*WindowProxy*/;
	var opener : Window/*WindowProxy?*/;
	__readonly__ var parent : Window/*WindowProxy*/;
	__readonly__ var frameElement : Element;
	function open() : Window/*WindowProxy*/;
	function open(url : string/*DOMString*/) : Window/*WindowProxy*/;
	function open(
		url : string/*DOMString*/,
		target : string/*DOMString*/
	) : Window/*WindowProxy*/;
	function open(
		url : string/*DOMString*/,
		target : string/*DOMString*/,
		features : string/*DOMString*/
	) : Window/*WindowProxy*/;
	function open(
		url : string/*DOMString*/,
		target : string/*DOMString*/,
		features : string/*DOMString*/,
		replace : boolean
	) : Window/*WindowProxy*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<Window/*WindowProxy*/>;
	function __native_index_operator__(
		name : string/*DOMString*/
	) : MayBeUndefined.<Object/*object*/>;
	// the user agent
	__readonly__ var navigator : Navigator;
	__readonly__ var external : External;
	__readonly__ var applicationCache : ApplicationCache;
	// user prompts
	function alert(message : string/*DOMString*/) : void;
	function confirm(message : string/*DOMString*/) : boolean;
	function prompt(
		message : string/*DOMString*/
	) : string/*DOMString?*/;
	function prompt(
		message : string/*DOMString*/,
		default : string/*DOMString*/
	) : string/*DOMString?*/;
	function print() : void;
	function showModalDialog(
		url : string/*DOMString*/
	) : variant/*any*/;
	function showModalDialog(
		url : string/*DOMString*/,
		argument : variant/*any*/
	) : variant/*any*/;
	// event handler IDL attributes
	var onabort : function(:Event):void/*Function?*/;
	var onafterprint : function(:Event):void/*Function?*/;
	var onbeforeprint : function(:Event):void/*Function?*/;
	var onbeforeunload : function(:Event):void/*Function?*/;
	var onblur : function(:Event):void/*Function?*/;
	var oncanplay : function(:Event):void/*Function?*/;
	var oncanplaythrough : function(:Event):void/*Function?*/;
	var onchange : function(:Event):void/*Function?*/;
	var onclick : function(:Event):void/*Function?*/;
	var oncontextmenu : function(:Event):void/*Function?*/;
	var oncuechange : function(:Event):void/*Function?*/;
	var ondblclick : function(:Event):void/*Function?*/;
	var ondrag : function(:Event):void/*Function?*/;
	var ondragend : function(:Event):void/*Function?*/;
	var ondragenter : function(:Event):void/*Function?*/;
	var ondragleave : function(:Event):void/*Function?*/;
	var ondragover : function(:Event):void/*Function?*/;
	var ondragstart : function(:Event):void/*Function?*/;
	var ondrop : function(:Event):void/*Function?*/;
	var ondurationchange : function(:Event):void/*Function?*/;
	var onemptied : function(:Event):void/*Function?*/;
	var onended : function(:Event):void/*Function?*/;
	var onerror : function(:Event):void/*Function?*/;
	var onfocus : function(:Event):void/*Function?*/;
	var onhashchange : function(:Event):void/*Function?*/;
	var oninput : function(:Event):void/*Function?*/;
	var oninvalid : function(:Event):void/*Function?*/;
	var onkeydown : function(:Event):void/*Function?*/;
	var onkeypress : function(:Event):void/*Function?*/;
	var onkeyup : function(:Event):void/*Function?*/;
	var onload : function(:Event):void/*Function?*/;
	var onloadeddata : function(:Event):void/*Function?*/;
	var onloadedmetadata : function(:Event):void/*Function?*/;
	var onloadstart : function(:Event):void/*Function?*/;
	var onmessage : function(:Event):void/*Function?*/;
	var onmousedown : function(:Event):void/*Function?*/;
	var onmousemove : function(:Event):void/*Function?*/;
	var onmouseout : function(:Event):void/*Function?*/;
	var onmouseover : function(:Event):void/*Function?*/;
	var onmouseup : function(:Event):void/*Function?*/;
	var onmousewheel : function(:Event):void/*Function?*/;
	var onoffline : function(:Event):void/*Function?*/;
	var ononline : function(:Event):void/*Function?*/;
	var onpause : function(:Event):void/*Function?*/;
	var onplay : function(:Event):void/*Function?*/;
	var onplaying : function(:Event):void/*Function?*/;
	var onpagehide : function(:Event):void/*Function?*/;
	var onpageshow : function(:Event):void/*Function?*/;
	var onpopstate : function(:Event):void/*Function?*/;
	var onprogress : function(:Event):void/*Function?*/;
	var onratechange : function(:Event):void/*Function?*/;
	var onreset : function(:Event):void/*Function?*/;
	var onresize : function(:Event):void/*Function?*/;
	var onscroll : function(:Event):void/*Function?*/;
	var onseeked : function(:Event):void/*Function?*/;
	var onseeking : function(:Event):void/*Function?*/;
	var onselect : function(:Event):void/*Function?*/;
	var onshow : function(:Event):void/*Function?*/;
	var onstalled : function(:Event):void/*Function?*/;
	var onstorage : function(:Event):void/*Function?*/;
	var onsubmit : function(:Event):void/*Function?*/;
	var onsuspend : function(:Event):void/*Function?*/;
	var ontimeupdate : function(:Event):void/*Function?*/;
	var onunload : function(:Event):void/*Function?*/;
	var onvolumechange : function(:Event):void/*Function?*/;
	var onwaiting : function(:Event):void/*Function?*/;

	// implements WindowBase64

	function btoa(btoa : string/*DOMString*/) : string/*DOMString*/;
	function atob(atob : string/*DOMString*/) : string/*DOMString*/;

	// implements WindowTimers

	function setTimeout(
		handler : function(:Event):void/*Function*/
	) : int/*long*/;
	function setTimeout(
		handler : function(:Event):void/*Function*/,
		timeout : int/*long*/
	) : int/*long*/;
	function setTimeout(
		handler : function(:Event):void/*Function*/,
		timeout : int/*long*/,
		args : variant/*any...*/
	) : int/*long*/;
	function setTimeout(handler : string/*DOMString*/) : int/*long*/;
	function setTimeout(
		handler : string/*DOMString*/,
		timeout : int/*long*/
	) : int/*long*/;
	function setTimeout(
		handler : string/*DOMString*/,
		timeout : int/*long*/,
		args : variant/*any...*/
	) : int/*long*/;
	function clearTimeout(handle : int/*long*/) : void;
	function setInterval(
		handler : function(:Event):void/*Function*/
	) : int/*long*/;
	function setInterval(
		handler : function(:Event):void/*Function*/,
		timeout : int/*long*/
	) : int/*long*/;
	function setInterval(
		handler : function(:Event):void/*Function*/,
		timeout : int/*long*/,
		args : variant/*any...*/
	) : int/*long*/;
	function setInterval(handler : string/*DOMString*/) : int/*long*/;
	function setInterval(
		handler : string/*DOMString*/,
		timeout : int/*long*/
	) : int/*long*/;
	function setInterval(
		handler : string/*DOMString*/,
		timeout : int/*long*/,
		args : variant/*any...*/
	) : int/*long*/;
	function clearInterval(handle : int/*long*/) : void;

} // end of Window

native class HTMLElement {

	__readonly__ var offsetParent : Element;
	__readonly__ var offsetTop : int/*long*/;
	__readonly__ var offsetLeft : int/*long*/;
	__readonly__ var offsetWidth : int/*long*/;
	__readonly__ var offsetHeight : int/*long*/;

	// metadata attributes
	var title : string/*DOMString*/;
	var lang : string/*DOMString*/;
	var translate : boolean;
	var dir : string/*DOMString*/;
	var className : string/*DOMString*/;
	__readonly__ var classList : DOMTokenList;
	__readonly__ var dataset : DOMStringMap;
	// user interaction
	var hidden : boolean;
	function click() : void;
	var tabIndex : int/*long*/;
	function focus() : void;
	function blur() : void;
	var accessKey : string/*DOMString*/;
	__readonly__ var accessKeyLabel : string/*DOMString*/;
	var draggable : boolean;
	__readonly__ var dropzone : DOMSettableTokenList;
	var contentEditable : string/*DOMString*/;
	__readonly__ var isContentEditable : boolean;
	var contextMenu : HTMLMenuElement;
	var spellcheck : boolean;
	// command API
	__readonly__ var commandType : string/*DOMString?*/;
	__readonly__ var commandLabel : string/*DOMString?*/;
	__readonly__ var commandIcon : string/*DOMString?*/;
	__readonly__ var commandHidden : boolean;
	__readonly__ var commandDisabled : boolean;
	__readonly__ var commandChecked : boolean;
	// styling
	__readonly__ var style : CSSStyleDeclaration;
	// event handler IDL attributes
	var onabort : function(:Event):void/*Function?*/;
	var onblur : function(:Event):void/*Function?*/;
	var oncanplay : function(:Event):void/*Function?*/;
	var oncanplaythrough : function(:Event):void/*Function?*/;
	var onchange : function(:Event):void/*Function?*/;
	var onclick : function(:Event):void/*Function?*/;
	var oncontextmenu : function(:Event):void/*Function?*/;
	var oncuechange : function(:Event):void/*Function?*/;
	var ondblclick : function(:Event):void/*Function?*/;
	var ondrag : function(:Event):void/*Function?*/;
	var ondragend : function(:Event):void/*Function?*/;
	var ondragenter : function(:Event):void/*Function?*/;
	var ondragleave : function(:Event):void/*Function?*/;
	var ondragover : function(:Event):void/*Function?*/;
	var ondragstart : function(:Event):void/*Function?*/;
	var ondrop : function(:Event):void/*Function?*/;
	var ondurationchange : function(:Event):void/*Function?*/;
	var onemptied : function(:Event):void/*Function?*/;
	var onended : function(:Event):void/*Function?*/;
	var onerror : function(:Event):void/*Function?*/;
	var onfocus : function(:Event):void/*Function?*/;
	var oninput : function(:Event):void/*Function?*/;
	var oninvalid : function(:Event):void/*Function?*/;
	var onkeydown : function(:Event):void/*Function?*/;
	var onkeypress : function(:Event):void/*Function?*/;
	var onkeyup : function(:Event):void/*Function?*/;
	var onload : function(:Event):void/*Function?*/;
	var onloadeddata : function(:Event):void/*Function?*/;
	var onloadedmetadata : function(:Event):void/*Function?*/;
	var onloadstart : function(:Event):void/*Function?*/;
	var onmousedown : function(:Event):void/*Function?*/;
	var onmousemove : function(:Event):void/*Function?*/;
	var onmouseout : function(:Event):void/*Function?*/;
	var onmouseover : function(:Event):void/*Function?*/;
	var onmouseup : function(:Event):void/*Function?*/;
	var onmousewheel : function(:Event):void/*Function?*/;
	var onpause : function(:Event):void/*Function?*/;
	var onplay : function(:Event):void/*Function?*/;
	var onplaying : function(:Event):void/*Function?*/;
	var onprogress : function(:Event):void/*Function?*/;
	var onratechange : function(:Event):void/*Function?*/;
	var onreset : function(:Event):void/*Function?*/;
	var onscroll : function(:Event):void/*Function?*/;
	var onseeked : function(:Event):void/*Function?*/;
	var onseeking : function(:Event):void/*Function?*/;
	var onselect : function(:Event):void/*Function?*/;
	var onshow : function(:Event):void/*Function?*/;
	var onstalled : function(:Event):void/*Function?*/;
	var onsubmit : function(:Event):void/*Function?*/;
	var onsuspend : function(:Event):void/*Function?*/;
	var ontimeupdate : function(:Event):void/*Function?*/;
	var onvolumechange : function(:Event):void/*Function?*/;
	var onwaiting : function(:Event):void/*Function?*/;

} // end of HTMLElement

native class HTMLAllCollection extends HTMLCollection {

	// inherits length and item(unsigned long index)
	function item(name : string/*DOMString*/) : Object/*object?*/;
	override function /* legacycaller getter */ namedItem(
		name : string/*DOMString*/
	) : MayBeUndefined.<Object/*object?*/>;
	// overrides inherited namedItem()
	function tags(tagName : string/*DOMString*/) : HTMLAllCollection;

} // end of HTMLAllCollection

native class HTMLFormControlsCollection extends HTMLCollection {

	// inherits length and item()
	override function /* legacycaller getter */ namedItem(
		name : string/*DOMString*/
	) : MayBeUndefined.<Object/*object?*/>;
	// overrides inherited namedItem()

} // end of HTMLFormControlsCollection

native class RadioNodeList extends NodeList {

	var value : string/*DOMString*/;

} // end of RadioNodeList

native class HTMLOptionsCollection extends HTMLCollection {

	// inherits item()
	// overrides inherited length
	override function /* legacycaller getter */ namedItem(
		name : string/*DOMString*/
	) : MayBeUndefined.<Object/*object?*/>;
	// overrides inherited namedItem()
	function add(
		element : HTMLOptionElement,
		long : HTMLElement
	) : void;
	function add(
		element : HTMLOptGroupElement,
		long : HTMLElement
	) : void;
	function remove(index : int/*long*/) : void;
	var selectedIndex : int/*long*/;

} // end of HTMLOptionsCollection

native class DOMStringMap {

	function __native_index_operator__(
		name : string/*DOMString*/
	) : MayBeUndefined.<string/*DOMString*/>;

} // end of DOMStringMap

native class Transferable {
}

native class HTMLDocument {

	// resource metadata management
	__readonly__ var location : Location;
	__readonly__ var URL : string/*DOMString*/;
	var domain : string/*DOMString*/;
	__readonly__ var referrer : string/*DOMString*/;
	var cookie : string/*DOMString*/;
	__readonly__ var lastModified : string/*DOMString*/;
	__readonly__ var readyState : string/*DOMString*/;
	// DOM tree accessors
	function __native_index_operator__(
		name : string/*DOMString*/
	) : MayBeUndefined.<Object/*object*/>;
	var title : string/*DOMString*/;
	var dir : string/*DOMString*/;
	var body : HTMLElement;
	__readonly__ var head : HTMLHeadElement;
	__readonly__ var images : HTMLCollection;
	__readonly__ var embeds : HTMLCollection;
	__readonly__ var plugins : HTMLCollection;
	__readonly__ var links : HTMLCollection;
	__readonly__ var forms : HTMLCollection;
	__readonly__ var scripts : HTMLCollection;
	function getElementsByName(
		elementName : string/*DOMString*/
	) : NodeList;
	// dynamic markup insertion
	function open() : HTMLDocument/*Document*/;
	function open(
		type : string/*DOMString*/
	) : HTMLDocument/*Document*/;
	function open(
		type : string/*DOMString*/,
		replace : string/*DOMString*/
	) : HTMLDocument/*Document*/;
	function open(
		url : string/*DOMString*/,
		name : string/*DOMString*/,
		features : string/*DOMString*/
	) : Window/*WindowProxy*/;
	function open(
		url : string/*DOMString*/,
		name : string/*DOMString*/,
		features : string/*DOMString*/,
		replace : boolean
	) : Window/*WindowProxy*/;
	function close() : void;
	function write() : void;
	function write(text : string/*DOMString...*/) : void;
	function writeln() : void;
	function writeln(text : string/*DOMString...*/) : void;
	// user interaction
	__readonly__ var defaultView : Window/*WindowProxy?*/;
	__readonly__ var activeElement : Element;
	function hasFocus() : boolean;
	var designMode : string/*DOMString*/;
	function execCommand(commandId : string/*DOMString*/) : boolean;
	function execCommand(
		commandId : string/*DOMString*/,
		showUI : boolean
	) : boolean;
	function execCommand(
		commandId : string/*DOMString*/,
		showUI : boolean,
		value : string/*DOMString*/
	) : boolean;
	function queryCommandEnabled(
		commandId : string/*DOMString*/
	) : boolean;
	function queryCommandIndeterm(
		commandId : string/*DOMString*/
	) : boolean;
	function queryCommandState(
		commandId : string/*DOMString*/
	) : boolean;
	function queryCommandSupported(
		commandId : string/*DOMString*/
	) : boolean;
	function queryCommandValue(
		commandId : string/*DOMString*/
	) : string/*DOMString*/;
	__readonly__ var commands : HTMLCollection;
	// event handler IDL attributes
	var onabort : function(:Event):void/*Function?*/;
	var onblur : function(:Event):void/*Function?*/;
	var oncanplay : function(:Event):void/*Function?*/;
	var oncanplaythrough : function(:Event):void/*Function?*/;
	var onchange : function(:Event):void/*Function?*/;
	var onclick : function(:Event):void/*Function?*/;
	var oncontextmenu : function(:Event):void/*Function?*/;
	var oncuechange : function(:Event):void/*Function?*/;
	var ondblclick : function(:Event):void/*Function?*/;
	var ondrag : function(:Event):void/*Function?*/;
	var ondragend : function(:Event):void/*Function?*/;
	var ondragenter : function(:Event):void/*Function?*/;
	var ondragleave : function(:Event):void/*Function?*/;
	var ondragover : function(:Event):void/*Function?*/;
	var ondragstart : function(:Event):void/*Function?*/;
	var ondrop : function(:Event):void/*Function?*/;
	var ondurationchange : function(:Event):void/*Function?*/;
	var onemptied : function(:Event):void/*Function?*/;
	var onended : function(:Event):void/*Function?*/;
	var onerror : function(:Event):void/*Function?*/;
	var onfocus : function(:Event):void/*Function?*/;
	var oninput : function(:Event):void/*Function?*/;
	var oninvalid : function(:Event):void/*Function?*/;
	var onkeydown : function(:Event):void/*Function?*/;
	var onkeypress : function(:Event):void/*Function?*/;
	var onkeyup : function(:Event):void/*Function?*/;
	var onload : function(:Event):void/*Function?*/;
	var onloadeddata : function(:Event):void/*Function?*/;
	var onloadedmetadata : function(:Event):void/*Function?*/;
	var onloadstart : function(:Event):void/*Function?*/;
	var onmousedown : function(:Event):void/*Function?*/;
	var onmousemove : function(:Event):void/*Function?*/;
	var onmouseout : function(:Event):void/*Function?*/;
	var onmouseover : function(:Event):void/*Function?*/;
	var onmouseup : function(:Event):void/*Function?*/;
	var onmousewheel : function(:Event):void/*Function?*/;
	var onpause : function(:Event):void/*Function?*/;
	var onplay : function(:Event):void/*Function?*/;
	var onplaying : function(:Event):void/*Function?*/;
	var onprogress : function(:Event):void/*Function?*/;
	var onratechange : function(:Event):void/*Function?*/;
	var onreset : function(:Event):void/*Function?*/;
	var onscroll : function(:Event):void/*Function?*/;
	var onseeked : function(:Event):void/*Function?*/;
	var onseeking : function(:Event):void/*Function?*/;
	var onselect : function(:Event):void/*Function?*/;
	var onshow : function(:Event):void/*Function?*/;
	var onstalled : function(:Event):void/*Function?*/;
	var onsubmit : function(:Event):void/*Function?*/;
	var onsuspend : function(:Event):void/*Function?*/;
	var ontimeupdate : function(:Event):void/*Function?*/;
	var onvolumechange : function(:Event):void/*Function?*/;
	var onwaiting : function(:Event):void/*Function?*/;
	// special event handler IDL attributes that only apply to Document objects
	var onreadystatechange : function(:Event):void/*Function?*/;

	var fgColor : string/*DOMString*/;
	var linkColor : string/*DOMString*/;
	var vlinkColor : string/*DOMString*/;
	var alinkColor : string/*DOMString*/;
	var bgColor : string/*DOMString*/;
	__readonly__ var anchors : HTMLCollection;
	__readonly__ var applets : HTMLCollection;
	function clear() : void;
	__readonly__ var all : HTMLAllCollection;

} // end of HTMLDocument

native class HTMLUnknownElement extends HTMLElement {
}

native class HTMLHtmlElement extends HTMLElement {

	var version : string/*DOMString*/;

} // end of HTMLHtmlElement

native class HTMLHeadElement extends HTMLElement {
}

native class HTMLTitleElement extends HTMLElement {

	var text : string/*DOMString*/;

} // end of HTMLTitleElement

native class HTMLBaseElement extends HTMLElement {

	var href : string/*DOMString*/;
	var target : string/*DOMString*/;

} // end of HTMLBaseElement

native class HTMLLinkElement extends HTMLElement {

	var disabled : boolean;
	var href : string/*DOMString*/;
	var rel : string/*DOMString*/;
	__readonly__ var relList : DOMTokenList;
	var media : string/*DOMString*/;
	var hreflang : string/*DOMString*/;
	var type : string/*DOMString*/;
	__readonly__ var sizes : DOMSettableTokenList;

	var charset : string/*DOMString*/;
	var rev : string/*DOMString*/;
	var target : string/*DOMString*/;

	// implements LinkStyle

	__readonly__ var sheet : StyleSheet;

} // end of HTMLLinkElement

native class HTMLMetaElement extends HTMLElement {

	var name : string/*DOMString*/;
	var httpEquiv : string/*DOMString*/;
	var content : string/*DOMString*/;

	var scheme : string/*DOMString*/;

} // end of HTMLMetaElement

native class HTMLStyleElement extends HTMLElement {

	var disabled : boolean;
	var media : string/*DOMString*/;
	var type : string/*DOMString*/;
	var scoped : boolean;

	// implements LinkStyle

	__readonly__ var sheet : StyleSheet;

} // end of HTMLStyleElement

native class HTMLScriptElement extends HTMLElement {

	var src : string/*DOMString*/;
	var async : boolean;
	var defer : boolean;
	var type : string/*DOMString*/;
	var charset : string/*DOMString*/;
	var text : string/*DOMString*/;

	var event : string/*DOMString*/;
	var htmlFor : string/*DOMString*/;

} // end of HTMLScriptElement

native class HTMLBodyElement extends HTMLElement {

	var onafterprint : function(:Event):void/*Function?*/;
	var onbeforeprint : function(:Event):void/*Function?*/;
	var onbeforeunload : function(:Event):void/*Function?*/;
	var onhashchange : function(:Event):void/*Function?*/;
	var onmessage : function(:Event):void/*Function?*/;
	var onoffline : function(:Event):void/*Function?*/;
	var ononline : function(:Event):void/*Function?*/;
	var onpopstate : function(:Event):void/*Function?*/;
	var onpagehide : function(:Event):void/*Function?*/;
	var onpageshow : function(:Event):void/*Function?*/;
	var onresize : function(:Event):void/*Function?*/;
	var onstorage : function(:Event):void/*Function?*/;
	var onunload : function(:Event):void/*Function?*/;

	var text : string/*DOMString*/;
	var link : string/*DOMString*/;
	var vLink : string/*DOMString*/;
	var aLink : string/*DOMString*/;
	var bgColor : string/*DOMString*/;
	var background : string/*DOMString*/;

} // end of HTMLBodyElement

native class HTMLHeadingElement extends HTMLElement {

	var align : string/*DOMString*/;

} // end of HTMLHeadingElement

native class HTMLParagraphElement extends HTMLElement {

	var align : string/*DOMString*/;

} // end of HTMLParagraphElement

native class HTMLHRElement extends HTMLElement {

	var align : string/*DOMString*/;
	var color : string/*DOMString*/;
	var noShade : boolean;
	var size : string/*DOMString*/;
	var width : string/*DOMString*/;

} // end of HTMLHRElement

native class HTMLPreElement extends HTMLElement {

	var width : int/*long*/;

} // end of HTMLPreElement

native class HTMLQuoteElement extends HTMLElement {

	var cite : string/*DOMString*/;

} // end of HTMLQuoteElement

native class HTMLOListElement extends HTMLElement {

	var reversed : boolean;
	var start : int/*long*/;
	var type : string/*DOMString*/;

	var compact : boolean;

} // end of HTMLOListElement

native class HTMLUListElement extends HTMLElement {

	var compact : boolean;
	var type : string/*DOMString*/;

} // end of HTMLUListElement

native class HTMLLIElement extends HTMLElement {

	var value : int/*long*/;

	var type : string/*DOMString*/;

} // end of HTMLLIElement

native class HTMLDListElement extends HTMLElement {

	var compact : boolean;

} // end of HTMLDListElement

native class HTMLDivElement extends HTMLElement {

	var align : string/*DOMString*/;

} // end of HTMLDivElement

native class HTMLAnchorElement extends HTMLElement {

	var href : string/*DOMString*/;
	var target : string/*DOMString*/;
	var rel : string/*DOMString*/;
	__readonly__ var relList : DOMTokenList;
	var media : string/*DOMString*/;
	var hreflang : string/*DOMString*/;
	var type : string/*DOMString*/;
	var text : string/*DOMString*/;
	// URL decomposition IDL attributes
	var protocol : string/*DOMString*/;
	var host : string/*DOMString*/;
	var hostname : string/*DOMString*/;
	var port : string/*DOMString*/;
	var pathname : string/*DOMString*/;
	var search : string/*DOMString*/;
	var hash : string/*DOMString*/;

	var coords : string/*DOMString*/;
	var charset : string/*DOMString*/;
	var name : string/*DOMString*/;
	var rev : string/*DOMString*/;
	var shape : string/*DOMString*/;

} // end of HTMLAnchorElement

native class HTMLTimeElement extends HTMLElement {

	var datetime : string/*DOMString*/;

} // end of HTMLTimeElement

native class HTMLSpanElement extends HTMLElement {
}

native class HTMLBRElement extends HTMLElement {

	var clear : string/*DOMString*/;

} // end of HTMLBRElement

native class HTMLModElement extends HTMLElement {

	var cite : string/*DOMString*/;
	var dateTime : string/*DOMString*/;

} // end of HTMLModElement

native class HTMLImageElement extends HTMLElement {

	var alt : string/*DOMString*/;
	var src : string/*DOMString*/;
	var crossOrigin : string/*DOMString*/;
	var useMap : string/*DOMString*/;
	var isMap : boolean;
	var width : int/*unsigned long*/;
	var height : int/*unsigned long*/;
	__readonly__ var naturalWidth : int/*unsigned long*/;
	__readonly__ var naturalHeight : int/*unsigned long*/;
	__readonly__ var complete : boolean;

	var name : string/*DOMString*/;
	var align : string/*DOMString*/;
	var hspace : int/*unsigned long*/;
	var vspace : int/*unsigned long*/;
	var longDesc : string/*DOMString*/;
	var border : string/*DOMString*/;

} // end of HTMLImageElement

native class HTMLIFrameElement extends HTMLElement {

	var src : string/*DOMString*/;
	var srcdoc : string/*DOMString*/;
	var name : string/*DOMString*/;
	__readonly__ var sandbox : DOMSettableTokenList;
	var seamless : boolean;
	var width : string/*DOMString*/;
	var height : string/*DOMString*/;
	__readonly__ var contentDocument : HTMLDocument/*Document?*/;
	__readonly__ var contentWindow : Window/*WindowProxy?*/;

	var align : string/*DOMString*/;
	var scrolling : string/*DOMString*/;
	var frameBorder : string/*DOMString*/;
	var longDesc : string/*DOMString*/;
	var marginHeight : string/*DOMString*/;
	var marginWidth : string/*DOMString*/;

} // end of HTMLIFrameElement

native class HTMLEmbedElement extends HTMLElement {

	var src : string/*DOMString*/;
	var type : string/*DOMString*/;
	var width : string/*DOMString*/;
	var height : string/*DOMString*/;

	var align : string/*DOMString*/;
	var name : string/*DOMString*/;

} // end of HTMLEmbedElement

native class HTMLObjectElement extends HTMLElement {

	var data : string/*DOMString*/;
	var type : string/*DOMString*/;
	var typeMustMatch : boolean;
	var name : string/*DOMString*/;
	var useMap : string/*DOMString*/;
	__readonly__ var form : HTMLFormElement;
	var width : string/*DOMString*/;
	var height : string/*DOMString*/;
	__readonly__ var contentDocument : HTMLDocument/*Document?*/;
	__readonly__ var contentWindow : Window/*WindowProxy?*/;
	__readonly__ var willValidate : boolean;
	__readonly__ var validity : ValidityState;
	__readonly__ var validationMessage : string/*DOMString*/;
	function checkValidity() : boolean;
	function setCustomValidity(error : string/*DOMString*/) : void;

	var align : string/*DOMString*/;
	var archive : string/*DOMString*/;
	var code : string/*DOMString*/;
	var declare : boolean;
	var hspace : int/*unsigned long*/;
	var standby : string/*DOMString*/;
	var vspace : int/*unsigned long*/;
	var codeBase : string/*DOMString*/;
	var codeType : string/*DOMString*/;
	var border : string/*DOMString*/;

} // end of HTMLObjectElement

native class HTMLParamElement extends HTMLElement {

	var name : string/*DOMString*/;
	var value : string/*DOMString*/;

	var type : string/*DOMString*/;
	var valueType : string/*DOMString*/;

} // end of HTMLParamElement

native class HTMLVideoElement extends HTMLMediaElement {

	var width : int/*unsigned long*/;
	var height : int/*unsigned long*/;
	__readonly__ var videoWidth : int/*unsigned long*/;
	__readonly__ var videoHeight : int/*unsigned long*/;
	var poster : string/*DOMString*/;

} // end of HTMLVideoElement

native class HTMLAudioElement extends HTMLMediaElement {
}

native class HTMLSourceElement extends HTMLElement {

	var src : string/*DOMString*/;
	var type : string/*DOMString*/;
	var media : string/*DOMString*/;

} // end of HTMLSourceElement

native class HTMLTrackElement extends HTMLElement {

	var kind : string/*DOMString*/;
	var src : string/*DOMString*/;
	var srclang : string/*DOMString*/;
	var label : string/*DOMString*/;
	var default : boolean;
	static const     NONE : int/*unsigned short*/;
	__readonly__ var NONE : int/*unsigned short*/;
	static const     LOADING : int/*unsigned short*/;
	__readonly__ var LOADING : int/*unsigned short*/;
	static const     LOADED : int/*unsigned short*/;
	__readonly__ var LOADED : int/*unsigned short*/;
	static const     ERROR : int/*unsigned short*/;
	__readonly__ var ERROR : int/*unsigned short*/;
	__readonly__ var readyState : int/*unsigned short*/;
	__readonly__ var track : TextTrack;

} // end of HTMLTrackElement

native class HTMLMediaElement extends HTMLElement {

	// error state
	__readonly__ var error : MediaError;
	// network state
	var src : string/*DOMString*/;
	__readonly__ var currentSrc : string/*DOMString*/;
	var crossOrigin : string/*DOMString*/;
	static const     NETWORK_EMPTY : int/*unsigned short*/;
	__readonly__ var NETWORK_EMPTY : int/*unsigned short*/;
	static const     NETWORK_IDLE : int/*unsigned short*/;
	__readonly__ var NETWORK_IDLE : int/*unsigned short*/;
	static const     NETWORK_LOADING : int/*unsigned short*/;
	__readonly__ var NETWORK_LOADING : int/*unsigned short*/;
	static const     NETWORK_NO_SOURCE : int/*unsigned short*/;
	__readonly__ var NETWORK_NO_SOURCE : int/*unsigned short*/;
	__readonly__ var networkState : int/*unsigned short*/;
	var preload : string/*DOMString*/;
	__readonly__ var buffered : TimeRanges;
	function load() : void;
	function canPlayType(
		type : string/*DOMString*/
	) : string/*DOMString*/;
	// ready state
	static const     HAVE_NOTHING : int/*unsigned short*/;
	__readonly__ var HAVE_NOTHING : int/*unsigned short*/;
	static const     HAVE_METADATA : int/*unsigned short*/;
	__readonly__ var HAVE_METADATA : int/*unsigned short*/;
	static const     HAVE_CURRENT_DATA : int/*unsigned short*/;
	__readonly__ var HAVE_CURRENT_DATA : int/*unsigned short*/;
	static const     HAVE_FUTURE_DATA : int/*unsigned short*/;
	__readonly__ var HAVE_FUTURE_DATA : int/*unsigned short*/;
	static const     HAVE_ENOUGH_DATA : int/*unsigned short*/;
	__readonly__ var HAVE_ENOUGH_DATA : int/*unsigned short*/;
	__readonly__ var readyState : int/*unsigned short*/;
	__readonly__ var seeking : boolean;
	// playback state
	var currentTime : number/*double*/;
	__readonly__ var initialTime : number/*double*/;
	__readonly__ var duration : number/*double*/;
	__readonly__ var startOffsetTime : Date;
	__readonly__ var paused : boolean;
	var defaultPlaybackRate : number/*double*/;
	var playbackRate : number/*double*/;
	__readonly__ var played : TimeRanges;
	__readonly__ var seekable : TimeRanges;
	__readonly__ var ended : boolean;
	var autoplay : boolean;
	var loop : boolean;
	function play() : void;
	function pause() : void;
	// media controller
	var mediaGroup : string/*DOMString*/;
	var controller : MediaController;
	// controls
	var controls : boolean;
	var volume : number/*double*/;
	var muted : boolean;
	var defaultMuted : boolean;
	// tracks
	__readonly__ var audioTracks : AudioTrackList;
	__readonly__ var videoTracks : VideoTrackList;
	__readonly__ var textTracks : TextTrackList;
	function addTextTrack(kind : string/*DOMString*/) : TextTrack;
	function addTextTrack(
		kind : string/*DOMString*/,
		label : string/*DOMString*/
	) : TextTrack;
	function addTextTrack(
		kind : string/*DOMString*/,
		label : string/*DOMString*/,
		language : string/*DOMString*/
	) : TextTrack;

} // end of HTMLMediaElement

native class MediaError {

	static const     MEDIA_ERR_ABORTED : int/*unsigned short*/;
	__readonly__ var MEDIA_ERR_ABORTED : int/*unsigned short*/;
	static const     MEDIA_ERR_NETWORK : int/*unsigned short*/;
	__readonly__ var MEDIA_ERR_NETWORK : int/*unsigned short*/;
	static const     MEDIA_ERR_DECODE : int/*unsigned short*/;
	__readonly__ var MEDIA_ERR_DECODE : int/*unsigned short*/;
	static const     MEDIA_ERR_SRC_NOT_SUPPORTED : int/*unsigned short*/;
	__readonly__ var MEDIA_ERR_SRC_NOT_SUPPORTED : int/*unsigned short*/;
	__readonly__ var code : int/*unsigned short*/;

} // end of MediaError

native class AudioTrackList extends EventTarget {

	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<AudioTrack>;
	function getTrackById(id : string/*DOMString*/) : AudioTrack;
	var onchange : function(:Event):void/*Function?*/;
	var onaddtrack : function(:Event):void/*Function?*/;

} // end of AudioTrackList

native class AudioTrack {

	__readonly__ var id : string/*DOMString*/;
	__readonly__ var kind : string/*DOMString*/;
	__readonly__ var label : string/*DOMString*/;
	__readonly__ var language : string/*DOMString*/;
	var enabled : boolean;

} // end of AudioTrack

native class VideoTrackList extends EventTarget {

	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<VideoTrack>;
	function getTrackById(id : string/*DOMString*/) : VideoTrack;
	__readonly__ var selectedIndex : int/*long*/;
	var onchange : function(:Event):void/*Function?*/;
	var onaddtrack : function(:Event):void/*Function?*/;

} // end of VideoTrackList

native class VideoTrack {

	__readonly__ var id : string/*DOMString*/;
	__readonly__ var kind : string/*DOMString*/;
	__readonly__ var label : string/*DOMString*/;
	__readonly__ var language : string/*DOMString*/;
	var selected : boolean;

} // end of VideoTrack

native class MediaController {

	function constructor();

	__readonly__ var buffered : TimeRanges;
	__readonly__ var seekable : TimeRanges;
	__readonly__ var duration : number/*double*/;
	var currentTime : number/*double*/;
	__readonly__ var paused : boolean;
	__readonly__ var played : TimeRanges;
	function play() : void;
	function pause() : void;
	var defaultPlaybackRate : number/*double*/;
	var playbackRate : number/*double*/;
	var volume : number/*double*/;
	var muted : boolean;
	var onemptied : function(:Event):void/*Function?*/;
	var onloadedmetadata : function(:Event):void/*Function?*/;
	var onloadeddata : function(:Event):void/*Function?*/;
	var oncanplay : function(:Event):void/*Function?*/;
	var oncanplaythrough : function(:Event):void/*Function?*/;
	var onplaying : function(:Event):void/*Function?*/;
	var onended : function(:Event):void/*Function?*/;
	var onwaiting : function(:Event):void/*Function?*/;
	var ondurationchange : function(:Event):void/*Function?*/;
	var ontimeupdate : function(:Event):void/*Function?*/;
	var onplay : function(:Event):void/*Function?*/;
	var onpause : function(:Event):void/*Function?*/;
	var onratechange : function(:Event):void/*Function?*/;
	var onvolumechange : function(:Event):void/*Function?*/;

} // end of MediaController

native class TextTrackList extends EventTarget {

	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<TextTrack>;
	var onaddtrack : function(:Event):void/*Function?*/;

} // end of TextTrackList

native class TextTrack extends EventTarget {

	__readonly__ var kind : string/*DOMString*/;
	__readonly__ var label : string/*DOMString*/;
	__readonly__ var language : string/*DOMString*/;
	static const     DISABLED : int/*unsigned short*/;
	__readonly__ var DISABLED : int/*unsigned short*/;
	static const     HIDDEN : int/*unsigned short*/;
	__readonly__ var HIDDEN : int/*unsigned short*/;
	static const     SHOWING : int/*unsigned short*/;
	__readonly__ var SHOWING : int/*unsigned short*/;
	var mode : int/*unsigned short*/;
	__readonly__ var cues : TextTrackCueList;
	__readonly__ var activeCues : TextTrackCueList;
	function addCue(cue : TextTrackCue) : void;
	function removeCue(cue : TextTrackCue) : void;
	var oncuechange : function(:Event):void/*Function?*/;

} // end of TextTrack

native class TextTrackCueList {

	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<TextTrackCue>;
	function getCueById(id : string/*DOMString*/) : TextTrackCue;

} // end of TextTrackCueList

native class TextTrackCue extends EventTarget {

	function constructor(id : string/*DOMString*/, startTime : number/*double*/, endTime : number/*double*/, text : string/*DOMString*/);
	function constructor(id : string/*DOMString*/, startTime : number/*double*/, endTime : number/*double*/, text : string/*DOMString*/, settings : string/*DOMString*/);
	function constructor(id : string/*DOMString*/, startTime : number/*double*/, endTime : number/*double*/, text : string/*DOMString*/, settings : string/*DOMString*/, pauseOnExit : boolean);

	__readonly__ var track : TextTrack;
	var id : string/*DOMString*/;
	var startTime : number/*double*/;
	var endTime : number/*double*/;
	var pauseOnExit : boolean;
	var vertical : string/*DOMString*/;
	var snapToLines : boolean;
	var line : int/*long*/;
	var position : int/*long*/;
	var size : int/*long*/;
	var align : string/*DOMString*/;
	var text : string/*DOMString*/;
	function getCueAsHTML() : DocumentFragment;
	var onenter : function(:Event):void/*Function?*/;
	var onexit : function(:Event):void/*Function?*/;

} // end of TextTrackCue

native class TimeRanges {

	__readonly__ var length : int/*unsigned long*/;
	function start(index : int/*unsigned long*/) : number/*double*/;
	function end(index : int/*unsigned long*/) : number/*double*/;

} // end of TimeRanges

native class TrackEvent extends Event {

	function constructor(type : string/*DOMString*/);
	function constructor(type : string/*DOMString*/, eventInitDict : TrackEventInit);

	__readonly__ var track : Object/*object?*/;

} // end of TrackEvent

native class TrackEventInit extends EventInit {

	var track : Object/*object?*/;

} // end of TrackEventInit

native class HTMLCanvasElement extends HTMLElement {

	var width : int/*unsigned long*/;
	var height : int/*unsigned long*/;
	function toDataURL() : string/*DOMString*/;
	function toDataURL(
		type : string/*DOMString*/
	) : string/*DOMString*/;
	function toDataURL(
		type : string/*DOMString*/,
		args : variant/*any...*/
	) : string/*DOMString*/;
	function toBlob(
		_callback : function(:File):void/*FileCallback?*/
	) : void;
	function toBlob(
		_callback : function(:File):void/*FileCallback?*/,
		type : string/*DOMString*/
	) : void;
	function toBlob(
		_callback : function(:File):void/*FileCallback?*/,
		type : string/*DOMString*/,
		args : variant/*any...*/
	) : void;
	function getContext(
		contextId : string/*DOMString*/
	) : Object/*object?*/;
	function getContext(
		contextId : string/*DOMString*/,
		args : variant/*any...*/
	) : Object/*object?*/;

} // end of HTMLCanvasElement

native class HTMLMapElement extends HTMLElement {

	var name : string/*DOMString*/;
	__readonly__ var areas : HTMLCollection;
	__readonly__ var images : HTMLCollection;

} // end of HTMLMapElement

native class HTMLAreaElement extends HTMLElement {

	var alt : string/*DOMString*/;
	var coords : string/*DOMString*/;
	var shape : string/*DOMString*/;
	var href : string/*DOMString*/;
	var target : string/*DOMString*/;
	var rel : string/*DOMString*/;
	__readonly__ var relList : DOMTokenList;
	var media : string/*DOMString*/;
	var hreflang : string/*DOMString*/;
	var type : string/*DOMString*/;
	// URL decomposition IDL attributes
	var protocol : string/*DOMString*/;
	var host : string/*DOMString*/;
	var hostname : string/*DOMString*/;
	var port : string/*DOMString*/;
	var pathname : string/*DOMString*/;
	var search : string/*DOMString*/;
	var hash : string/*DOMString*/;

	var noHref : boolean;

} // end of HTMLAreaElement

native class HTMLTableElement extends HTMLElement {

	var caption : HTMLTableCaptionElement;
	function createCaption() : HTMLElement;
	function deleteCaption() : void;
	var tHead : HTMLTableSectionElement;
	function createTHead() : HTMLElement;
	function deleteTHead() : void;
	var tFoot : HTMLTableSectionElement;
	function createTFoot() : HTMLElement;
	function deleteTFoot() : void;
	__readonly__ var tBodies : HTMLCollection;
	function createTBody() : HTMLElement;
	__readonly__ var rows : HTMLCollection;
	function insertRow() : HTMLElement;
	function insertRow(index : int/*long*/) : HTMLElement;
	function deleteRow(index : int/*long*/) : void;
	var border : string/*DOMString*/;

	var align : string/*DOMString*/;
	var frame : string/*DOMString*/;
	var rules : string/*DOMString*/;
	var summary : string/*DOMString*/;
	var width : string/*DOMString*/;
	var bgColor : string/*DOMString*/;
	var cellPadding : string/*DOMString*/;
	var cellSpacing : string/*DOMString*/;

} // end of HTMLTableElement

native class HTMLTableCaptionElement extends HTMLElement {

	var align : string/*DOMString*/;

} // end of HTMLTableCaptionElement

native class HTMLTableColElement extends HTMLElement {

	var span : int/*unsigned long*/;

	var align : string/*DOMString*/;
	var ch : string/*DOMString*/;
	var chOff : string/*DOMString*/;
	var vAlign : string/*DOMString*/;
	var width : string/*DOMString*/;

} // end of HTMLTableColElement

native class HTMLTableSectionElement extends HTMLElement {

	__readonly__ var rows : HTMLCollection;
	function insertRow() : HTMLElement;
	function insertRow(index : int/*long*/) : HTMLElement;
	function deleteRow(index : int/*long*/) : void;

	var align : string/*DOMString*/;
	var ch : string/*DOMString*/;
	var chOff : string/*DOMString*/;
	var vAlign : string/*DOMString*/;

} // end of HTMLTableSectionElement

native class HTMLTableRowElement extends HTMLElement {

	__readonly__ var rowIndex : int/*long*/;
	__readonly__ var sectionRowIndex : int/*long*/;
	__readonly__ var cells : HTMLCollection;
	function insertCell() : HTMLElement;
	function insertCell(index : int/*long*/) : HTMLElement;
	function deleteCell(index : int/*long*/) : void;

	var align : string/*DOMString*/;
	var ch : string/*DOMString*/;
	var chOff : string/*DOMString*/;
	var vAlign : string/*DOMString*/;
	var bgColor : string/*DOMString*/;

} // end of HTMLTableRowElement

native class HTMLTableDataCellElement extends HTMLTableCellElement {
}

native class HTMLTableHeaderCellElement extends HTMLTableCellElement {

	var scope : string/*DOMString*/;

} // end of HTMLTableHeaderCellElement

native class HTMLTableCellElement extends HTMLElement {

	var colSpan : int/*unsigned long*/;
	var rowSpan : int/*unsigned long*/;
	__readonly__ var headers : DOMSettableTokenList;
	__readonly__ var cellIndex : int/*long*/;

	var abbr : string/*DOMString*/;
	var align : string/*DOMString*/;
	var axis : string/*DOMString*/;
	var height : string/*DOMString*/;
	var width : string/*DOMString*/;
	var ch : string/*DOMString*/;
	var chOff : string/*DOMString*/;
	var noWrap : boolean;
	var vAlign : string/*DOMString*/;
	var bgColor : string/*DOMString*/;

} // end of HTMLTableCellElement

native class HTMLFormElement extends HTMLElement {

	var acceptCharset : string/*DOMString*/;
	var action : string/*DOMString*/;
	var autocomplete : string/*DOMString*/;
	var enctype : string/*DOMString*/;
	var encoding : string/*DOMString*/;
	var method : string/*DOMString*/;
	var name : string/*DOMString*/;
	var noValidate : boolean;
	var target : string/*DOMString*/;
	__readonly__ var elements : HTMLFormControlsCollection;
	__readonly__ var length : int/*long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<Element>;
	function __native_index_operator__(
		name : string/*DOMString*/
	) : MayBeUndefined.<Object/*object*/>;
	function submit() : void;
	function reset() : void;
	function checkValidity() : boolean;

} // end of HTMLFormElement

native class HTMLFieldSetElement extends HTMLElement {

	var disabled : boolean;
	__readonly__ var form : HTMLFormElement;
	var name : string/*DOMString*/;
	__readonly__ var type : string/*DOMString*/;
	__readonly__ var elements : HTMLFormControlsCollection;
	__readonly__ var willValidate : boolean;
	__readonly__ var validity : ValidityState;
	__readonly__ var validationMessage : string/*DOMString*/;
	function checkValidity() : boolean;
	function setCustomValidity(error : string/*DOMString*/) : void;

} // end of HTMLFieldSetElement

native class HTMLLegendElement extends HTMLElement {

	__readonly__ var form : HTMLFormElement;

	var align : string/*DOMString*/;

} // end of HTMLLegendElement

native class HTMLLabelElement extends HTMLElement {

	__readonly__ var form : HTMLFormElement;
	var htmlFor : string/*DOMString*/;
	__readonly__ var control : HTMLElement;

} // end of HTMLLabelElement

native class HTMLInputElement extends HTMLElement {

	var accept : string/*DOMString*/;
	var alt : string/*DOMString*/;
	var autocomplete : string/*DOMString*/;
	var autofocus : boolean;
	var defaultChecked : boolean;
	var checked : boolean;
	var dirName : string/*DOMString*/;
	var disabled : boolean;
	__readonly__ var form : HTMLFormElement;
	__readonly__ var files : FileList;
	var formAction : string/*DOMString*/;
	var formEnctype : string/*DOMString*/;
	var formMethod : string/*DOMString*/;
	var formNoValidate : boolean;
	var formTarget : string/*DOMString*/;
	var height : int/*unsigned long*/;
	var indeterminate : boolean;
	__readonly__ var list : HTMLElement;
	var max : string/*DOMString*/;
	var maxLength : int/*long*/;
	var min : string/*DOMString*/;
	var multiple : boolean;
	var name : string/*DOMString*/;
	var pattern : string/*DOMString*/;
	var placeholder : string/*DOMString*/;
	var readOnly : boolean;
	var required : boolean;
	var size : int/*unsigned long*/;
	var src : string/*DOMString*/;
	var step : string/*DOMString*/;
	var type : string/*DOMString*/;
	var defaultValue : string/*DOMString*/;
	var value : string/*DOMString*/;
	var valueAsDate : Date;
	var valueAsNumber : number/*double*/;
	var width : int/*unsigned long*/;
	function stepUp() : void;
	function stepUp(n : int/*long*/) : void;
	function stepDown() : void;
	function stepDown(n : int/*long*/) : void;
	__readonly__ var willValidate : boolean;
	__readonly__ var validity : ValidityState;
	__readonly__ var validationMessage : string/*DOMString*/;
	function checkValidity() : boolean;
	function setCustomValidity(error : string/*DOMString*/) : void;
	__readonly__ var labels : NodeList;
	function select() : void;
	var selectionStart : int/*unsigned long*/;
	var selectionEnd : int/*unsigned long*/;
	var selectionDirection : string/*DOMString*/;
	function setSelectionRange(
		start : int/*unsigned long*/,
		end : int/*unsigned long*/
	) : void;
	function setSelectionRange(
		start : int/*unsigned long*/,
		end : int/*unsigned long*/,
		direction : string/*DOMString*/
	) : void;

	var align : string/*DOMString*/;
	var useMap : string/*DOMString*/;

} // end of HTMLInputElement

native class HTMLButtonElement extends HTMLElement {

	var autofocus : boolean;
	var disabled : boolean;
	__readonly__ var form : HTMLFormElement;
	var formAction : string/*DOMString*/;
	var formEnctype : string/*DOMString*/;
	var formMethod : string/*DOMString*/;
	var formNoValidate : boolean;
	var formTarget : string/*DOMString*/;
	var name : string/*DOMString*/;
	var type : string/*DOMString*/;
	var value : string/*DOMString*/;
	__readonly__ var willValidate : boolean;
	__readonly__ var validity : ValidityState;
	__readonly__ var validationMessage : string/*DOMString*/;
	function checkValidity() : boolean;
	function setCustomValidity(error : string/*DOMString*/) : void;
	__readonly__ var labels : NodeList;

} // end of HTMLButtonElement

native class HTMLSelectElement extends HTMLElement {

	var autofocus : boolean;
	var disabled : boolean;
	__readonly__ var form : HTMLFormElement;
	var multiple : boolean;
	var name : string/*DOMString*/;
	var required : boolean;
	var size : int/*unsigned long*/;
	__readonly__ var type : string/*DOMString*/;
	__readonly__ var options : HTMLOptionsCollection;
	var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<Element>;
	function /* getter */ item(
		index : int/*unsigned long*/
	) : MayBeUndefined.<Element>;
	function namedItem(name : string/*DOMString*/) : Object/*object*/;
	function add(
		element : HTMLOptionElement,
		long : HTMLElement
	) : void;
	function add(
		element : HTMLOptGroupElement,
		long : HTMLElement
	) : void;
	function remove(index : int/*long*/) : void;
	__readonly__ var selectedOptions : HTMLCollection;
	var selectedIndex : int/*long*/;
	var value : string/*DOMString*/;
	__readonly__ var willValidate : boolean;
	__readonly__ var validity : ValidityState;
	__readonly__ var validationMessage : string/*DOMString*/;
	function checkValidity() : boolean;
	function setCustomValidity(error : string/*DOMString*/) : void;
	__readonly__ var labels : NodeList;

} // end of HTMLSelectElement

native class HTMLDataListElement extends HTMLElement {

	__readonly__ var options : HTMLCollection;

} // end of HTMLDataListElement

native class HTMLOptGroupElement extends HTMLElement {

	var disabled : boolean;
	var label : string/*DOMString*/;

} // end of HTMLOptGroupElement

native class HTMLOptionElement extends HTMLElement {

	var disabled : boolean;
	__readonly__ var form : HTMLFormElement;
	var label : string/*DOMString*/;
	var defaultSelected : boolean;
	var selected : boolean;
	var value : string/*DOMString*/;
	var text : string/*DOMString*/;
	__readonly__ var index : int/*long*/;

} // end of HTMLOptionElement

native class HTMLTextAreaElement extends HTMLElement {

	var autofocus : boolean;
	var cols : int/*unsigned long*/;
	var dirName : string/*DOMString*/;
	var disabled : boolean;
	__readonly__ var form : HTMLFormElement;
	var maxLength : int/*long*/;
	var name : string/*DOMString*/;
	var placeholder : string/*DOMString*/;
	var readOnly : boolean;
	var required : boolean;
	var rows : int/*unsigned long*/;
	var wrap : string/*DOMString*/;
	__readonly__ var type : string/*DOMString*/;
	var defaultValue : string/*DOMString*/;
	var value : string/*DOMString*/;
	__readonly__ var textLength : int/*unsigned long*/;
	__readonly__ var willValidate : boolean;
	__readonly__ var validity : ValidityState;
	__readonly__ var validationMessage : string/*DOMString*/;
	function checkValidity() : boolean;
	function setCustomValidity(error : string/*DOMString*/) : void;
	__readonly__ var labels : NodeList;
	function select() : void;
	var selectionStart : int/*unsigned long*/;
	var selectionEnd : int/*unsigned long*/;
	var selectionDirection : string/*DOMString*/;
	function setSelectionRange(
		start : int/*unsigned long*/,
		end : int/*unsigned long*/
	) : void;
	function setSelectionRange(
		start : int/*unsigned long*/,
		end : int/*unsigned long*/,
		direction : string/*DOMString*/
	) : void;

} // end of HTMLTextAreaElement

native class HTMLKeygenElement extends HTMLElement {

	var autofocus : boolean;
	var challenge : string/*DOMString*/;
	var disabled : boolean;
	__readonly__ var form : HTMLFormElement;
	var keytype : string/*DOMString*/;
	var name : string/*DOMString*/;
	__readonly__ var type : string/*DOMString*/;
	__readonly__ var willValidate : boolean;
	__readonly__ var validity : ValidityState;
	__readonly__ var validationMessage : string/*DOMString*/;
	function checkValidity() : boolean;
	function setCustomValidity(error : string/*DOMString*/) : void;
	__readonly__ var labels : NodeList;

} // end of HTMLKeygenElement

native class HTMLOutputElement extends HTMLElement {

	__readonly__ var htmlFor : DOMSettableTokenList;
	__readonly__ var form : HTMLFormElement;
	var name : string/*DOMString*/;
	__readonly__ var type : string/*DOMString*/;
	var defaultValue : string/*DOMString*/;
	var value : string/*DOMString*/;
	__readonly__ var willValidate : boolean;
	__readonly__ var validity : ValidityState;
	__readonly__ var validationMessage : string/*DOMString*/;
	function checkValidity() : boolean;
	function setCustomValidity(error : string/*DOMString*/) : void;
	__readonly__ var labels : NodeList;

} // end of HTMLOutputElement

native class HTMLProgressElement extends HTMLElement {

	var value : number/*double*/;
	var max : number/*double*/;
	__readonly__ var position : number/*double*/;
	__readonly__ var labels : NodeList;

} // end of HTMLProgressElement

native class HTMLMeterElement extends HTMLElement {

	var value : number/*double*/;
	var min : number/*double*/;
	var max : number/*double*/;
	var low : number/*double*/;
	var high : number/*double*/;
	var optimum : number/*double*/;
	__readonly__ var labels : NodeList;

} // end of HTMLMeterElement

native class ValidityState {

	__readonly__ var valueMissing : boolean;
	__readonly__ var typeMismatch : boolean;
	__readonly__ var patternMismatch : boolean;
	__readonly__ var tooLong : boolean;
	__readonly__ var rangeUnderflow : boolean;
	__readonly__ var rangeOverflow : boolean;
	__readonly__ var stepMismatch : boolean;
	__readonly__ var customError : boolean;
	__readonly__ var valid : boolean;

} // end of ValidityState

native class HTMLDetailsElement extends HTMLElement {

	var open : boolean;

} // end of HTMLDetailsElement

native class HTMLCommandElement extends HTMLElement {

	var type : string/*DOMString*/;
	var label : string/*DOMString*/;
	var icon : string/*DOMString*/;
	var disabled : boolean;
	var checked : boolean;
	var radiogroup : string/*DOMString*/;
	__readonly__ var command : HTMLElement;

} // end of HTMLCommandElement

native class HTMLMenuElement extends HTMLElement {

	var type : string/*DOMString*/;
	var label : string/*DOMString*/;

	var compact : boolean;

} // end of HTMLMenuElement

native class BarProp {

	var visible : boolean;

} // end of BarProp

native class History {

	__readonly__ var length : int/*long*/;
	__readonly__ var state : variant/*any*/;
	function go() : void;
	function go(delta : int/*long*/) : void;
	function back() : void;
	function forward() : void;
	function pushState(
		data : variant/*any*/,
		title : string/*DOMString*/
	) : void;
	function pushState(
		data : variant/*any*/,
		title : string/*DOMString*/,
		url : string/*DOMString*/
	) : void;
	function replaceState(
		data : variant/*any*/,
		title : string/*DOMString*/
	) : void;
	function replaceState(
		data : variant/*any*/,
		title : string/*DOMString*/,
		url : string/*DOMString*/
	) : void;

} // end of History

native class Location {

	var href : string/*DOMString*/;
	function assign(url : string/*DOMString*/) : void;
	function replace(url : string/*DOMString*/) : void;
	function reload() : void;
	// URL decomposition IDL attributes
	var protocol : string/*DOMString*/;
	var host : string/*DOMString*/;
	var hostname : string/*DOMString*/;
	var port : string/*DOMString*/;
	var pathname : string/*DOMString*/;
	var search : string/*DOMString*/;
	var hash : string/*DOMString*/;

} // end of Location

native class PopStateEvent extends Event {

	function constructor(type : string/*DOMString*/);
	function constructor(type : string/*DOMString*/, eventInitDict : PopStateEventInit);

	__readonly__ var state : variant/*any*/;

} // end of PopStateEvent

native class PopStateEventInit extends EventInit {

	var state : variant/*any*/;

} // end of PopStateEventInit

native class HashChangeEvent extends Event {

	function constructor(type : string/*DOMString*/);
	function constructor(type : string/*DOMString*/, eventInitDict : HashChangeEventInit);

	__readonly__ var oldURL : string/*DOMString*/;
	__readonly__ var newURL : string/*DOMString*/;

} // end of HashChangeEvent

native class HashChangeEventInit extends EventInit {

	var oldURL : string/*DOMString*/;
	var newURL : string/*DOMString*/;

} // end of HashChangeEventInit

native class PageTransitionEvent extends Event {

	function constructor(type : string/*DOMString*/);
	function constructor(type : string/*DOMString*/, eventInitDict : PageTransitionEventInit);

	__readonly__ var persisted : boolean;

} // end of PageTransitionEvent

native class PageTransitionEventInit extends EventInit {

	var persisted : boolean;

} // end of PageTransitionEventInit

native class BeforeUnloadEvent extends Event {

	var returnValue : string/*DOMString*/;

} // end of BeforeUnloadEvent

native class ApplicationCache extends EventTarget {

	// update status
	static const     UNCACHED : int/*unsigned short*/;
	__readonly__ var UNCACHED : int/*unsigned short*/;
	static const     IDLE : int/*unsigned short*/;
	__readonly__ var IDLE : int/*unsigned short*/;
	static const     CHECKING : int/*unsigned short*/;
	__readonly__ var CHECKING : int/*unsigned short*/;
	static const     DOWNLOADING : int/*unsigned short*/;
	__readonly__ var DOWNLOADING : int/*unsigned short*/;
	static const     UPDATEREADY : int/*unsigned short*/;
	__readonly__ var UPDATEREADY : int/*unsigned short*/;
	static const     OBSOLETE : int/*unsigned short*/;
	__readonly__ var OBSOLETE : int/*unsigned short*/;
	__readonly__ var status : int/*unsigned short*/;
	// updates
	function update() : void;
	function abort() : void;
	function swapCache() : void;
	// events
	var onchecking : function(:Event):void/*Function?*/;
	var onerror : function(:Event):void/*Function?*/;
	var onnoupdate : function(:Event):void/*Function?*/;
	var ondownloading : function(:Event):void/*Function?*/;
	var onprogress : function(:Event):void/*Function?*/;
	var onupdateready : function(:Event):void/*Function?*/;
	var oncached : function(:Event):void/*Function?*/;
	var onobsolete : function(:Event):void/*Function?*/;

} // end of ApplicationCache

native class WindowModal {

	__readonly__ var dialogArguments : variant/*any*/;
	var returnValue : string/*DOMString*/;

} // end of WindowModal

native class Navigator {

	// objects implementing this interface also implement the interfaces given below

	// implements NavigatorID

	__readonly__ var appName : string/*DOMString*/;
	__readonly__ var appVersion : string/*DOMString*/;
	__readonly__ var platform : string/*DOMString*/;
	__readonly__ var userAgent : string/*DOMString*/;

	// implements NavigatorOnLine

	__readonly__ var onLine : boolean;

	// implements NavigatorContentUtils

	// content handler registration
	function registerProtocolHandler(
		scheme : string/*DOMString*/,
		url : string/*DOMString*/,
		title : string/*DOMString*/
	) : void;
	function registerContentHandler(
		mimeType : string/*DOMString*/,
		url : string/*DOMString*/,
		title : string/*DOMString*/
	) : void;
	function isProtocolHandlerRegistered(
		scheme : string/*DOMString*/,
		url : string/*DOMString*/
	) : string/*DOMString*/;
	function isContentHandlerRegistered(
		mimeType : string/*DOMString*/,
		url : string/*DOMString*/
	) : string/*DOMString*/;
	function unregisterProtocolHandler(
		scheme : string/*DOMString*/,
		url : string/*DOMString*/
	) : void;
	function unregisterContentHandler(
		mimeType : string/*DOMString*/,
		url : string/*DOMString*/
	) : void;

	// implements NavigatorStorageUtils

	function yieldForStorageUpdates() : void;

} // end of Navigator

native class External {

	function AddSearchProvider(engineURL : string/*DOMString*/) : void;
	function IsSearchProviderInstalled(
		engineURL : string/*DOMString*/
	) : int/*unsigned long*/;

} // end of External

native class DataTransfer {

	var dropEffect : string/*DOMString*/;
	var effectAllowed : string/*DOMString*/;
	__readonly__ var items : DataTransferItemList;
	function setDragImage(
		image : Element,
		x : int/*long*/,
		y : int/*long*/
	) : void;
	function addElement(element : Element) : void;
	/* old interface */
	__readonly__ var types : DOMStringList;
	function getData(
		format : string/*DOMString*/
	) : string/*DOMString*/;
	function setData(
		format : string/*DOMString*/,
		data : string/*DOMString*/
	) : void;
	function clearData() : void;
	function clearData(format : string/*DOMString*/) : void;
	__readonly__ var files : FileList;

} // end of DataTransfer

native class DataTransferItemList {

	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<DataTransferItem>;
	function clear() : void;
	function add(
		data : string/*DOMString*/,
		type : string/*DOMString*/
	) : DataTransferItem;
	function add(data : File) : DataTransferItem;

} // end of DataTransferItemList

native class DataTransferItem {

	__readonly__ var kind : string/*DOMString*/;
	__readonly__ var type : string/*DOMString*/;
	function getAsString(_callback : FunctionStringCallback) : void;
	function getAsFile() : File;

} // end of DataTransferItem

native class FunctionStringCallback {

	function handleEvent(data : string/*DOMString*/) : void;

} // end of FunctionStringCallback

native class DragEvent extends MouseEvent {

	function constructor(type : string/*DOMString*/);
	function constructor(type : string/*DOMString*/, eventInitDict : DragEventInit);

	__readonly__ var dataTransfer : DataTransfer;

} // end of DragEvent

native class DragEventInit extends MouseEventInit {

	var dataTransfer : DataTransfer;

} // end of DragEventInit

native class HTMLAppletElement extends HTMLElement {

	var align : string/*DOMString*/;
	var alt : string/*DOMString*/;
	var archive : string/*DOMString*/;
	var code : string/*DOMString*/;
	var codeBase : string/*DOMString*/;
	var height : string/*DOMString*/;
	var hspace : int/*unsigned long*/;
	var name : string/*DOMString*/;
	var _object : string/*DOMString*/;
	// the underscore is not part of the identifier
	var vspace : int/*unsigned long*/;
	var width : string/*DOMString*/;

} // end of HTMLAppletElement

native class HTMLMarqueeElement extends HTMLElement {

	var behavior : string/*DOMString*/;
	var bgColor : string/*DOMString*/;
	var direction : string/*DOMString*/;
	var height : string/*DOMString*/;
	var hspace : int/*unsigned long*/;
	var loop : int/*long*/;
	var scrollAmount : int/*unsigned long*/;
	var scrollDelay : int/*unsigned long*/;
	var trueSpeed : boolean;
	var vspace : int/*unsigned long*/;
	var width : string/*DOMString*/;
	var onbounce : function(:Event):void/*Function?*/;
	var onfinish : function(:Event):void/*Function?*/;
	var onstart : function(:Event):void/*Function?*/;
	function start() : void;
	function stop() : void;

} // end of HTMLMarqueeElement

native class HTMLFrameSetElement extends HTMLElement {

	var cols : string/*DOMString*/;
	var rows : string/*DOMString*/;
	var onafterprint : function(:Event):void/*Function?*/;
	var onbeforeprint : function(:Event):void/*Function?*/;
	var onbeforeunload : function(:Event):void/*Function?*/;
	var onhashchange : function(:Event):void/*Function?*/;
	var onmessage : function(:Event):void/*Function?*/;
	var onoffline : function(:Event):void/*Function?*/;
	var ononline : function(:Event):void/*Function?*/;
	var onpagehide : function(:Event):void/*Function?*/;
	var onpageshow : function(:Event):void/*Function?*/;
	var onpopstate : function(:Event):void/*Function?*/;
	var onresize : function(:Event):void/*Function?*/;
	var onstorage : function(:Event):void/*Function?*/;
	var onunload : function(:Event):void/*Function?*/;

} // end of HTMLFrameSetElement

native class HTMLFrameElement extends HTMLElement {

	var name : string/*DOMString*/;
	var scrolling : string/*DOMString*/;
	var src : string/*DOMString*/;
	var frameBorder : string/*DOMString*/;
	var longDesc : string/*DOMString*/;
	var noResize : boolean;
	__readonly__ var contentDocument : HTMLDocument/*Document?*/;
	__readonly__ var contentWindow : Window/*WindowProxy?*/;
	var marginHeight : string/*DOMString*/;
	var marginWidth : string/*DOMString*/;

} // end of HTMLFrameElement

native class HTMLBaseFontElement extends HTMLElement {

	var color : string/*DOMString*/;
	var face : string/*DOMString*/;
	var size : int/*long*/;

} // end of HTMLBaseFontElement

native class HTMLDirectoryElement extends HTMLElement {

	var compact : boolean;

} // end of HTMLDirectoryElement

native class HTMLFontElement extends HTMLElement {

	var color : string/*DOMString*/;
	var face : string/*DOMString*/;
	var size : string/*DOMString*/;

} // end of HTMLFontElement

/*
end of generated files from:
	http://www.w3.org/TR/html5/single-page.html
*/


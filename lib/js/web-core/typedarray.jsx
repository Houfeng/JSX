// THIS FILE IS AUTOMATICALLY GENERATED.
/**

Typed Arrays

Specification and Reference:
    http://www.khronos.org/registry/typedarray/specs/latest/
    https://developer.mozilla.org/en/javascript_typed_arrays/ArrayBuffer
*/

/*
automatically generated from:
	https://www.khronos.org/registry/typedarray/specs/latest/typedarray.idl
*/
native class ArrayBuffer {

	function constructor(length : int/*unsigned long*/);

	__readonly__ var byteLength : int/*unsigned long*/;
	function slice(begin : int/*long*/) : ArrayBuffer;
	function slice(
		begin : int/*long*/,
		end : int/*long*/
	) : ArrayBuffer;

	// implements Transferable

} // end of ArrayBuffer

native class ArrayBufferView {

	__readonly__ var buffer : ArrayBuffer;
	__readonly__ var byteOffset : int/*unsigned long*/;
	__readonly__ var byteLength : int/*unsigned long*/;

} // end of ArrayBufferView

native class Int8Array extends ArrayBufferView {

	static const     BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*byte*/>;
	function /* getter */ get(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*byte*/>;
	function /* setter */ set(
		index : int/*unsigned long*/,
		value : int/*byte*/
	) : void;
	function set(array : Int8Array) : void;
	function set(
		array : Int8Array,
		offset : int/*unsigned long*/
	) : void;
	function set(array : int[]/*byte[]*/) : void;
	function set(
		array : int[]/*byte[]*/,
		offset : int/*unsigned long*/
	) : void;
	function set(array : number[]) : void;
	function set(
		array : number[],
		offset : int/*unsigned long*/
	) : void;
	function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Int8Array;

} // end of Int8Array

native class Uint8Array extends ArrayBufferView {

	static const     BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*octet*/>;
	function /* getter */ get(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*octet*/>;
	function /* setter */ set(
		index : int/*unsigned long*/,
		value : int/*octet*/
	) : void;
	function set(array : Uint8Array) : void;
	function set(
		array : Uint8Array,
		offset : int/*unsigned long*/
	) : void;
	function set(array : int[]/*octet[]*/) : void;
	function set(
		array : int[]/*octet[]*/,
		offset : int/*unsigned long*/
	) : void;
	function set(array : number[]) : void;
	function set(
		array : number[],
		offset : int/*unsigned long*/
	) : void;
	function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Uint8Array;

} // end of Uint8Array

native class Uint8ClampedArray extends Uint8Array {

	function set(array : Uint8ClampedArray) : void;
	function set(
		array : Uint8ClampedArray,
		offset : int/*unsigned long*/
	) : void;
	override function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Uint8ClampedArray;

} // end of Uint8ClampedArray

native class Int16Array extends ArrayBufferView {

	static const     BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*short*/>;
	function /* getter */ get(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*short*/>;
	function /* setter */ set(
		index : int/*unsigned long*/,
		value : int/*short*/
	) : void;
	function set(array : Int16Array) : void;
	function set(
		array : Int16Array,
		offset : int/*unsigned long*/
	) : void;
	function set(array : int[]/*short[]*/) : void;
	function set(
		array : int[]/*short[]*/,
		offset : int/*unsigned long*/
	) : void;
	function set(array : number[]) : void;
	function set(
		array : number[],
		offset : int/*unsigned long*/
	) : void;
	function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Int16Array;

} // end of Int16Array

native class Uint16Array extends ArrayBufferView {

	static const     BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*unsigned short*/>;
	function /* getter */ get(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*unsigned short*/>;
	function /* setter */ set(
		index : int/*unsigned long*/,
		value : int/*unsigned short*/
	) : void;
	function set(array : Uint16Array) : void;
	function set(
		array : Uint16Array,
		offset : int/*unsigned long*/
	) : void;
	function set(array : int[]/*unsigned short[]*/) : void;
	function set(
		array : int[]/*unsigned short[]*/,
		offset : int/*unsigned long*/
	) : void;
	function set(array : number[]) : void;
	function set(
		array : number[],
		offset : int/*unsigned long*/
	) : void;
	function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Uint16Array;

} // end of Uint16Array

native class Int32Array extends ArrayBufferView {

	static const     BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*long*/>;
	function /* getter */ get(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*long*/>;
	function /* setter */ set(
		index : int/*unsigned long*/,
		value : int/*long*/
	) : void;
	function set(array : Int32Array) : void;
	function set(
		array : Int32Array,
		offset : int/*unsigned long*/
	) : void;
	function set(array : int[]/*long[]*/) : void;
	function set(
		array : int[]/*long[]*/,
		offset : int/*unsigned long*/
	) : void;
	function set(array : number[]) : void;
	function set(
		array : number[],
		offset : int/*unsigned long*/
	) : void;
	function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Int32Array;

} // end of Int32Array

native class Uint32Array extends ArrayBufferView {

	static const     BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*unsigned long*/>;
	function /* getter */ get(
		index : int/*unsigned long*/
	) : MayBeUndefined.<int/*unsigned long*/>;
	function /* setter */ set(
		index : int/*unsigned long*/,
		value : int/*unsigned long*/
	) : void;
	function set(array : Uint32Array) : void;
	function set(
		array : Uint32Array,
		offset : int/*unsigned long*/
	) : void;
	function set(array : int[]/*unsigned long[]*/) : void;
	function set(
		array : int[]/*unsigned long[]*/,
		offset : int/*unsigned long*/
	) : void;
	function set(array : number[]) : void;
	function set(
		array : number[],
		offset : int/*unsigned long*/
	) : void;
	function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Uint32Array;

} // end of Uint32Array

native class Float32Array extends ArrayBufferView {

	static const     BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<number/*float*/>;
	function /* getter */ get(
		index : int/*unsigned long*/
	) : MayBeUndefined.<number/*float*/>;
	function /* setter */ set(
		index : int/*unsigned long*/,
		value : number/*float*/
	) : void;
	function set(array : Float32Array) : void;
	function set(
		array : Float32Array,
		offset : int/*unsigned long*/
	) : void;
	function set(array : number[]/*float[]*/) : void;
	function set(
		array : number[]/*float[]*/,
		offset : int/*unsigned long*/
	) : void;
	function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Float32Array;

} // end of Float32Array

native class Float64Array extends ArrayBufferView {

	static const     BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var BYTES_PER_ELEMENT : int/*long*/;
	__readonly__ var length : int/*unsigned long*/;
	function __native_index_operator__(
		index : int/*unsigned long*/
	) : MayBeUndefined.<number/*double*/>;
	function /* getter */ get(
		index : int/*unsigned long*/
	) : MayBeUndefined.<number/*double*/>;
	function /* setter */ set(
		index : int/*unsigned long*/,
		value : number/*double*/
	) : void;
	function set(array : Float64Array) : void;
	function set(
		array : Float64Array,
		offset : int/*unsigned long*/
	) : void;
	function set(array : number[]/*double[]*/) : void;
	function set(
		array : number[]/*double[]*/,
		offset : int/*unsigned long*/
	) : void;
	function subarray(
		start : int/*long*/,
		end : int/*long*/
	) : Float64Array;

} // end of Float64Array

native class DataView extends ArrayBufferView {

	function constructor(buffer : ArrayBuffer);
	function constructor(buffer : ArrayBuffer, byteOffset : int/*unsigned long*/);
	function constructor(buffer : ArrayBuffer, byteOffset : int/*unsigned long*/, byteLength : int/*unsigned long*/);

	// Gets the value of the given type at the specified byte offset
	// from the start of the view. There is no alignment constraint;
	// multi-byte values may be fetched from any offset.
	//
	// For multi-byte values, the optional littleEndian argument
	// indicates whether a big-endian or little-endian value should be
	// read. If false or undefined, a big-endian value is read.
	//
	// These methods raise an INDEX_SIZE_ERR exception if they would read
	// beyond the end of the view.
	function getInt8(byteOffset : int/*unsigned long*/) : int/*byte*/;
	function getUint8(byteOffset : int/*unsigned long*/) : int/*octet*/;
	function getInt16(byteOffset : int/*unsigned long*/) : int/*short*/;
	function getInt16(
		byteOffset : int/*unsigned long*/,
		littleEndian : boolean
	) : int/*short*/;
	function getUint16(
		byteOffset : int/*unsigned long*/
	) : int/*unsigned short*/;
	function getUint16(
		byteOffset : int/*unsigned long*/,
		littleEndian : boolean
	) : int/*unsigned short*/;
	function getInt32(byteOffset : int/*unsigned long*/) : int/*long*/;
	function getInt32(
		byteOffset : int/*unsigned long*/,
		littleEndian : boolean
	) : int/*long*/;
	function getUint32(
		byteOffset : int/*unsigned long*/
	) : int/*unsigned long*/;
	function getUint32(
		byteOffset : int/*unsigned long*/,
		littleEndian : boolean
	) : int/*unsigned long*/;
	function getFloat32(
		byteOffset : int/*unsigned long*/
	) : number/*float*/;
	function getFloat32(
		byteOffset : int/*unsigned long*/,
		littleEndian : boolean
	) : number/*float*/;
	function getFloat64(
		byteOffset : int/*unsigned long*/
	) : number/*double*/;
	function getFloat64(
		byteOffset : int/*unsigned long*/,
		littleEndian : boolean
	) : number/*double*/;
	// Stores a value of the given type at the specified byte offset
	// from the start of the view. There is no alignment constraint;
	// multi-byte values may be stored at any offset.
	//
	// For multi-byte values, the optional littleEndian argument
	// indicates whether the value should be stored in big-endian or
	// little-endian byte order. If false or undefined, the value is
	// stored in big-endian byte order.
	//
	// These methods throw exceptions if they would write beyond the end
	// of the view.
	function setInt8(
		byteOffset : int/*unsigned long*/,
		value : int/*byte*/
	) : void;
	function setUint8(
		byteOffset : int/*unsigned long*/,
		value : int/*octet*/
	) : void;
	function setInt16(
		byteOffset : int/*unsigned long*/,
		value : int/*short*/
	) : void;
	function setInt16(
		byteOffset : int/*unsigned long*/,
		value : int/*short*/,
		littleEndian : boolean
	) : void;
	function setUint16(
		byteOffset : int/*unsigned long*/,
		value : int/*unsigned short*/
	) : void;
	function setUint16(
		byteOffset : int/*unsigned long*/,
		value : int/*unsigned short*/,
		littleEndian : boolean
	) : void;
	function setInt32(
		byteOffset : int/*unsigned long*/,
		value : int/*long*/
	) : void;
	function setInt32(
		byteOffset : int/*unsigned long*/,
		value : int/*long*/,
		littleEndian : boolean
	) : void;
	function setUint32(
		byteOffset : int/*unsigned long*/,
		value : int/*unsigned long*/
	) : void;
	function setUint32(
		byteOffset : int/*unsigned long*/,
		value : int/*unsigned long*/,
		littleEndian : boolean
	) : void;
	function setFloat32(
		byteOffset : int/*unsigned long*/,
		value : number/*float*/
	) : void;
	function setFloat32(
		byteOffset : int/*unsigned long*/,
		value : number/*float*/,
		littleEndian : boolean
	) : void;
	function setFloat64(
		byteOffset : int/*unsigned long*/,
		value : number/*double*/
	) : void;
	function setFloat64(
		byteOffset : int/*unsigned long*/,
		value : number/*double*/,
		littleEndian : boolean
	) : void;

} // end of DataView

/*
end of generated files from:
	https://www.khronos.org/registry/typedarray/specs/latest/typedarray.idl
*/

